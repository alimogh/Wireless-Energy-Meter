
Energy Meter III.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000198c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e2  00800060  0000198c  00001a40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000087  00800142  00800142  00001b22  2**0
                  ALLOC
  3 .eeprom       0000000c  00810000  00810000  00001b22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00002ab4  00000000  00000000  00001b30  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000009c6  00000000  00000000  000045e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00004faa  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000238  00000000  00000000  00004fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002ef6  00000000  00000000  00005211  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000094d  00000000  00000000  00008107  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001236  00000000  00000000  00008a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000006d4  00000000  00000000  00009c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000893  00000000  00000000  0000a360  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001dc2  00000000  00000000  0000abf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001d8  00000000  00000000  0000c9b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <__vector_1>
       8:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__vector_2>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__vector_6>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__vector_18>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <get_time+0x2a>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef468>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efef2>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__zero_reg__+0x3b>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <nrf24l01_init+0xe6>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <nrf24l01_setrxaddr+0x48>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef10a>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff4c>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <toggleE+0x6>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d4 e0       	ldi	r29, 0x04	; 4
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ec e8       	ldi	r30, 0x8C	; 140
     162:	f9 e1       	ldi	r31, 0x19	; 25
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	a2 34       	cpi	r26, 0x42	; 66
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
     170:	21 e0       	ldi	r18, 0x01	; 1
     172:	a2 e4       	ldi	r26, 0x42	; 66
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a9 3c       	cpi	r26, 0xC9	; 201
     17c:	b2 07       	cpc	r27, r18
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <main>
     184:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <delay_us>:
     18c:	10 92 43 01 	sts	0x0143, r1
     190:	00 97       	sbiw	r24, 0x00	; 0
     192:	79 f0       	breq	.+30     	; 0x1b2 <delay_us+0x26>
     194:	41 e0       	ldi	r20, 0x01	; 1
     196:	01 c0       	rjmp	.+2      	; 0x19a <delay_us+0xe>
     198:	45 2f       	mov	r20, r21
     19a:	54 2f       	mov	r21, r20
     19c:	5f 5f       	subi	r21, 0xFF	; 255
     19e:	24 2f       	mov	r18, r20
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	28 17       	cp	r18, r24
     1a4:	39 07       	cpc	r19, r25
     1a6:	c0 f3       	brcs	.-16     	; 0x198 <delay_us+0xc>
     1a8:	8a e0       	ldi	r24, 0x0A	; 10
     1aa:	80 93 44 01 	sts	0x0144, r24
     1ae:	40 93 43 01 	sts	0x0143, r20
     1b2:	08 95       	ret

000001b4 <toggleE>:
     1b4:	84 e6       	ldi	r24, 0x64	; 100
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 c6 00 	call	0x18c	; 0x18c <delay_us>
     1bc:	aa 9a       	sbi	0x15, 2	; 21
     1be:	84 e6       	ldi	r24, 0x64	; 100
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	0e 94 c6 00 	call	0x18c	; 0x18c <delay_us>
     1c6:	aa 98       	cbi	0x15, 2	; 21
     1c8:	08 95       	ret

000001ca <lcd_cmd>:
     1ca:	cf 93       	push	r28
     1cc:	c8 2f       	mov	r28, r24
     1ce:	aa 98       	cbi	0x15, 2	; 21
     1d0:	85 b3       	in	r24, 0x15	; 21
     1d2:	9c 2f       	mov	r25, r28
     1d4:	90 7f       	andi	r25, 0xF0	; 240
     1d6:	88 70       	andi	r24, 0x08	; 8
     1d8:	89 2b       	or	r24, r25
     1da:	85 bb       	out	0x15, r24	; 21
     1dc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <toggleE>
     1e0:	85 b3       	in	r24, 0x15	; 21
     1e2:	c2 95       	swap	r28
     1e4:	c0 7f       	andi	r28, 0xF0	; 240
     1e6:	88 70       	andi	r24, 0x08	; 8
     1e8:	c8 2b       	or	r28, r24
     1ea:	c5 bb       	out	0x15, r28	; 21
     1ec:	0e 94 da 00 	call	0x1b4	; 0x1b4 <toggleE>
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <lcd_string>:
     1f4:	ff 92       	push	r15
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	8c 01       	movw	r16, r24
     200:	aa 98       	cbi	0x15, 2	; 21
     202:	fc 01       	movw	r30, r24
     204:	80 81       	ld	r24, Z
     206:	81 11       	cpse	r24, r1
     208:	08 c0       	rjmp	.+16     	; 0x21a <lcd_string+0x26>
     20a:	23 c0       	rjmp	.+70     	; 0x252 <lcd_string+0x5e>
     20c:	f0 e1       	ldi	r31, 0x10	; 16
     20e:	ff 12       	cpse	r15, r31
     210:	06 c0       	rjmp	.+12     	; 0x21e <lcd_string+0x2a>
     212:	80 ec       	ldi	r24, 0xC0	; 192
     214:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_cmd>
     218:	02 c0       	rjmp	.+4      	; 0x21e <lcd_string+0x2a>
     21a:	e8 01       	movw	r28, r16
     21c:	f1 2c       	mov	r15, r1
     21e:	85 b3       	in	r24, 0x15	; 21
     220:	98 81       	ld	r25, Y
     222:	90 7f       	andi	r25, 0xF0	; 240
     224:	88 70       	andi	r24, 0x08	; 8
     226:	89 2b       	or	r24, r25
     228:	85 bb       	out	0x15, r24	; 21
     22a:	a8 9a       	sbi	0x15, 0	; 21
     22c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <toggleE>
     230:	85 b3       	in	r24, 0x15	; 21
     232:	98 81       	ld	r25, Y
     234:	92 95       	swap	r25
     236:	90 7f       	andi	r25, 0xF0	; 240
     238:	88 70       	andi	r24, 0x08	; 8
     23a:	89 2b       	or	r24, r25
     23c:	85 bb       	out	0x15, r24	; 21
     23e:	a8 9a       	sbi	0x15, 0	; 21
     240:	0e 94 da 00 	call	0x1b4	; 0x1b4 <toggleE>
     244:	f3 94       	inc	r15
     246:	e8 01       	movw	r28, r16
     248:	cf 0d       	add	r28, r15
     24a:	d1 1d       	adc	r29, r1
     24c:	88 81       	ld	r24, Y
     24e:	81 11       	cpse	r24, r1
     250:	dd cf       	rjmp	.-70     	; 0x20c <lcd_string+0x18>
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	1f 91       	pop	r17
     258:	0f 91       	pop	r16
     25a:	ff 90       	pop	r15
     25c:	08 95       	ret

0000025e <lcd_gotoxy1>:
     25e:	80 58       	subi	r24, 0x80	; 128
     260:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_cmd>
     264:	08 95       	ret

00000266 <WaitMs>:
     266:	4c ec       	ldi	r20, 0xCC	; 204
     268:	5c e0       	ldi	r21, 0x0C	; 12
     26a:	05 c0       	rjmp	.+10     	; 0x276 <WaitMs+0x10>
     26c:	9a 01       	movw	r18, r20
     26e:	00 00       	nop
     270:	21 50       	subi	r18, 0x01	; 1
     272:	31 09       	sbc	r19, r1
     274:	e1 f7       	brne	.-8      	; 0x26e <WaitMs+0x8>
     276:	01 97       	sbiw	r24, 0x01	; 1
     278:	c8 f7       	brcc	.-14     	; 0x26c <WaitMs+0x6>
     27a:	08 95       	ret

0000027c <lcd_init>:
     27c:	85 b3       	in	r24, 0x15	; 21
     27e:	80 93 42 01 	sts	0x0142, r24
     282:	8f ef       	ldi	r24, 0xFF	; 255
     284:	84 bb       	out	0x14, r24	; 20
     286:	8f e0       	ldi	r24, 0x0F	; 15
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 33 01 	call	0x266	; 0x266 <WaitMs>
     28e:	83 e0       	ldi	r24, 0x03	; 3
     290:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_cmd>
     294:	8d e2       	ldi	r24, 0x2D	; 45
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 33 01 	call	0x266	; 0x266 <WaitMs>
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_cmd>
     2a2:	8f e0       	ldi	r24, 0x0F	; 15
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	0e 94 33 01 	call	0x266	; 0x266 <WaitMs>
     2aa:	aa 98       	cbi	0x15, 2	; 21
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_cmd>
     2b2:	8f e0       	ldi	r24, 0x0F	; 15
     2b4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_cmd>
     2b8:	82 e0       	ldi	r24, 0x02	; 2
     2ba:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_cmd>
     2be:	80 e8       	ldi	r24, 0x80	; 128
     2c0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_cmd>
     2c4:	8f e0       	ldi	r24, 0x0F	; 15
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 33 01 	call	0x266	; 0x266 <WaitMs>
     2cc:	08 95       	ret

000002ce <spi_init>:
     2ce:	87 b3       	in	r24, 0x17	; 23
     2d0:	8f 70       	andi	r24, 0x0F	; 15
     2d2:	87 bb       	out	0x17, r24	; 23
     2d4:	87 b3       	in	r24, 0x17	; 23
     2d6:	80 6b       	ori	r24, 0xB0	; 176
     2d8:	87 bb       	out	0x17, r24	; 23
     2da:	81 e5       	ldi	r24, 0x51	; 81
     2dc:	8d b9       	out	0x0d, r24	; 13
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	8e b9       	out	0x0e, r24	; 14
     2e2:	08 95       	ret

000002e4 <spi_writereadbyte>:
     2e4:	8f b9       	out	0x0f, r24	; 15
     2e6:	77 9b       	sbis	0x0e, 7	; 14
     2e8:	fe cf       	rjmp	.-4      	; 0x2e6 <spi_writereadbyte+0x2>
     2ea:	8f b1       	in	r24, 0x0f	; 15
     2ec:	08 95       	ret

000002ee <nrf24l01_readregister>:
     2ee:	c1 98       	cbi	0x18, 1	; 24
     2f0:	8f 71       	andi	r24, 0x1F	; 31
     2f2:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_writereadbyte>
     2f6:	8f ef       	ldi	r24, 0xFF	; 255
     2f8:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_writereadbyte>
     2fc:	c1 9a       	sbi	0x18, 1	; 24
     2fe:	08 95       	ret

00000300 <nrf24l01_writeregister>:
     300:	cf 93       	push	r28
     302:	c6 2f       	mov	r28, r22
     304:	c1 98       	cbi	0x18, 1	; 24
     306:	8f 71       	andi	r24, 0x1F	; 31
     308:	80 62       	ori	r24, 0x20	; 32
     30a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_writereadbyte>
     30e:	8c 2f       	mov	r24, r28
     310:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_writereadbyte>
     314:	c1 9a       	sbi	0x18, 1	; 24
     316:	cf 91       	pop	r28
     318:	08 95       	ret

0000031a <nrf24l01_writeregisters>:
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	06 2f       	mov	r16, r22
     326:	17 2f       	mov	r17, r23
     328:	f4 2e       	mov	r15, r20
     32a:	c1 98       	cbi	0x18, 1	; 24
     32c:	8f 71       	andi	r24, 0x1F	; 31
     32e:	80 62       	ori	r24, 0x20	; 32
     330:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_writereadbyte>
     334:	ff 20       	and	r15, r15
     336:	71 f0       	breq	.+28     	; 0x354 <nrf24l01_writeregisters+0x3a>
     338:	c0 2f       	mov	r28, r16
     33a:	d1 2f       	mov	r29, r17
     33c:	8e 01       	movw	r16, r28
     33e:	0f 5f       	subi	r16, 0xFF	; 255
     340:	1f 4f       	sbci	r17, 0xFF	; 255
     342:	fa 94       	dec	r15
     344:	0f 0d       	add	r16, r15
     346:	11 1d       	adc	r17, r1
     348:	89 91       	ld	r24, Y+
     34a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_writereadbyte>
     34e:	c0 17       	cp	r28, r16
     350:	d1 07       	cpc	r29, r17
     352:	d1 f7       	brne	.-12     	; 0x348 <nrf24l01_writeregisters+0x2e>
     354:	c1 9a       	sbi	0x18, 1	; 24
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	1f 91       	pop	r17
     35c:	0f 91       	pop	r16
     35e:	ff 90       	pop	r15
     360:	08 95       	ret

00000362 <nrf24l01_revaddress>:
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	04 96       	adiw	r24, 0x04	; 4
     368:	fb 01       	movw	r30, r22
     36a:	e2 0f       	add	r30, r18
     36c:	f3 1f       	adc	r31, r19
     36e:	dc 01       	movw	r26, r24
     370:	a2 1b       	sub	r26, r18
     372:	b3 0b       	sbc	r27, r19
     374:	4c 91       	ld	r20, X
     376:	40 83       	st	Z, r20
     378:	2f 5f       	subi	r18, 0xFF	; 255
     37a:	3f 4f       	sbci	r19, 0xFF	; 255
     37c:	25 30       	cpi	r18, 0x05	; 5
     37e:	31 05       	cpc	r19, r1
     380:	99 f7       	brne	.-26     	; 0x368 <nrf24l01_revaddress+0x6>
     382:	08 95       	ret

00000384 <nrf24l01_setrxaddr>:
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	00 d0       	rcall	.+0      	; 0x38a <nrf24l01_setrxaddr+0x6>
     38a:	00 d0       	rcall	.+0      	; 0x38c <nrf24l01_setrxaddr+0x8>
     38c:	1f 92       	push	r1
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	9b 01       	movw	r18, r22
     394:	81 11       	cpse	r24, r1
     396:	16 c0       	rjmp	.+44     	; 0x3c4 <nrf24l01_setrxaddr+0x40>
     398:	85 e0       	ldi	r24, 0x05	; 5
     39a:	fb 01       	movw	r30, r22
     39c:	a0 e6       	ldi	r26, 0x60	; 96
     39e:	b0 e0       	ldi	r27, 0x00	; 0
     3a0:	01 90       	ld	r0, Z+
     3a2:	0d 92       	st	X+, r0
     3a4:	8a 95       	dec	r24
     3a6:	e1 f7       	brne	.-8      	; 0x3a0 <nrf24l01_setrxaddr+0x1c>
     3a8:	be 01       	movw	r22, r28
     3aa:	6f 5f       	subi	r22, 0xFF	; 255
     3ac:	7f 4f       	sbci	r23, 0xFF	; 255
     3ae:	c9 01       	movw	r24, r18
     3b0:	0e 94 b1 01 	call	0x362	; 0x362 <nrf24l01_revaddress>
     3b4:	45 e0       	ldi	r20, 0x05	; 5
     3b6:	be 01       	movw	r22, r28
void nrf24l01_setrxaddr(uint8_t pipe, uint8_t *addr) {
	if(pipe == 0) {
		memcpy(&nrf24l01_addr0, addr, NRF24L01_ADDRSIZE); //cache address
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE);
     3b8:	6f 5f       	subi	r22, 0xFF	; 255
     3ba:	7f 4f       	sbci	r23, 0xFF	; 255
     3bc:	8a e0       	ldi	r24, 0x0A	; 10
     3be:	0e 94 8d 01 	call	0x31a	; 0x31a <nrf24l01_writeregisters>
     3c2:	56 c0       	rjmp	.+172    	; 0x470 <__stack+0x11>
	} else if(pipe == 1) {
     3c4:	81 30       	cpi	r24, 0x01	; 1
     3c6:	b1 f4       	brne	.+44     	; 0x3f4 <nrf24l01_setrxaddr+0x70>
		memcpy(&nrf24l01_addr1, addr, NRF24L01_ADDRSIZE); //cache address
     3c8:	85 e0       	ldi	r24, 0x05	; 5
     3ca:	fb 01       	movw	r30, r22
     3cc:	a5 e6       	ldi	r26, 0x65	; 101
     3ce:	b0 e0       	ldi	r27, 0x00	; 0
     3d0:	01 90       	ld	r0, Z+
     3d2:	0d 92       	st	X+, r0
     3d4:	8a 95       	dec	r24
     3d6:	e1 f7       	brne	.-8      	; 0x3d0 <nrf24l01_setrxaddr+0x4c>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     3d8:	be 01       	movw	r22, r28
     3da:	6f 5f       	subi	r22, 0xFF	; 255
     3dc:	7f 4f       	sbci	r23, 0xFF	; 255
     3de:	c9 01       	movw	r24, r18
     3e0:	0e 94 b1 01 	call	0x362	; 0x362 <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P1, addrrev, NRF24L01_ADDRSIZE);
     3e4:	45 e0       	ldi	r20, 0x05	; 5
     3e6:	be 01       	movw	r22, r28
     3e8:	6f 5f       	subi	r22, 0xFF	; 255
     3ea:	7f 4f       	sbci	r23, 0xFF	; 255
     3ec:	8b e0       	ldi	r24, 0x0B	; 11
     3ee:	0e 94 8d 01 	call	0x31a	; 0x31a <nrf24l01_writeregisters>
     3f2:	3e c0       	rjmp	.+124    	; 0x470 <__stack+0x11>
	} else if(pipe == 2) {
     3f4:	82 30       	cpi	r24, 0x02	; 2
     3f6:	71 f4       	brne	.+28     	; 0x414 <nrf24l01_setrxaddr+0x90>
		memcpy(&nrf24l01_addr2, addr, NRF24L01_ADDRSIZE); //cache address
     3f8:	85 e0       	ldi	r24, 0x05	; 5
     3fa:	fb 01       	movw	r30, r22
     3fc:	aa e6       	ldi	r26, 0x6A	; 106
     3fe:	b0 e0       	ldi	r27, 0x00	; 0
     400:	01 90       	ld	r0, Z+
     402:	0d 92       	st	X+, r0
     404:	8a 95       	dec	r24
     406:	e1 f7       	brne	.-8      	; 0x400 <nrf24l01_setrxaddr+0x7c>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P2, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     408:	fb 01       	movw	r30, r22
     40a:	64 81       	ldd	r22, Z+4	; 0x04
     40c:	8c e0       	ldi	r24, 0x0C	; 12
     40e:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
     412:	2e c0       	rjmp	.+92     	; 0x470 <__stack+0x11>
	} else if(pipe == 3) {
     414:	83 30       	cpi	r24, 0x03	; 3
     416:	71 f4       	brne	.+28     	; 0x434 <nrf24l01_setrxaddr+0xb0>
		memcpy(&nrf24l01_addr3, addr, NRF24L01_ADDRSIZE); //cache address
     418:	85 e0       	ldi	r24, 0x05	; 5
     41a:	fb 01       	movw	r30, r22
     41c:	af e6       	ldi	r26, 0x6F	; 111
     41e:	b0 e0       	ldi	r27, 0x00	; 0
     420:	01 90       	ld	r0, Z+
     422:	0d 92       	st	X+, r0
     424:	8a 95       	dec	r24
     426:	e1 f7       	brne	.-8      	; 0x420 <nrf24l01_setrxaddr+0x9c>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P3, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     428:	fb 01       	movw	r30, r22
     42a:	64 81       	ldd	r22, Z+4	; 0x04
     42c:	8d e0       	ldi	r24, 0x0D	; 13
     42e:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
     432:	1e c0       	rjmp	.+60     	; 0x470 <__stack+0x11>
	} else if(pipe == 4) {
     434:	84 30       	cpi	r24, 0x04	; 4
     436:	71 f4       	brne	.+28     	; 0x454 <nrf24l01_setrxaddr+0xd0>
		memcpy(&nrf24l01_addr4, addr, NRF24L01_ADDRSIZE); //cache address
     438:	85 e0       	ldi	r24, 0x05	; 5
     43a:	fb 01       	movw	r30, r22
     43c:	a4 e7       	ldi	r26, 0x74	; 116
     43e:	b0 e0       	ldi	r27, 0x00	; 0
     440:	01 90       	ld	r0, Z+
     442:	0d 92       	st	X+, r0
     444:	8a 95       	dec	r24
     446:	e1 f7       	brne	.-8      	; 0x440 <nrf24l01_setrxaddr+0xbc>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P4, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     448:	fb 01       	movw	r30, r22
     44a:	64 81       	ldd	r22, Z+4	; 0x04
     44c:	8e e0       	ldi	r24, 0x0E	; 14
     44e:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
     452:	0e c0       	rjmp	.+28     	; 0x470 <__stack+0x11>
	} else if(pipe == 5) {
     454:	85 30       	cpi	r24, 0x05	; 5
     456:	61 f4       	brne	.+24     	; 0x470 <__stack+0x11>
		memcpy(&nrf24l01_addr5, addr, NRF24L01_ADDRSIZE); //cache address
     458:	fb 01       	movw	r30, r22
     45a:	a9 e7       	ldi	r26, 0x79	; 121
     45c:	b0 e0       	ldi	r27, 0x00	; 0
     45e:	01 90       	ld	r0, Z+
     460:	0d 92       	st	X+, r0
     462:	8a 95       	dec	r24
     464:	e1 f7       	brne	.-8      	; 0x45e <nrf24l01_setrxaddr+0xda>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P5, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     466:	fb 01       	movw	r30, r22
     468:	64 81       	ldd	r22, Z+4	; 0x04
     46a:	8f e0       	ldi	r24, 0x0F	; 15
     46c:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
	}
}
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <nrf24l01_settxaddr>:

/*
 * set tx address
 */
void nrf24l01_settxaddr(uint8_t *addr) {
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	00 d0       	rcall	.+0      	; 0x486 <nrf24l01_settxaddr+0x6>
     486:	00 d0       	rcall	.+0      	; 0x488 <nrf24l01_settxaddr+0x8>
     488:	1f 92       	push	r1
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
	memcpy(&nrf24l01_addrtx, addr, NRF24L01_ADDRSIZE); //cache address
     48e:	25 e0       	ldi	r18, 0x05	; 5
     490:	fc 01       	movw	r30, r24
     492:	ae e7       	ldi	r26, 0x7E	; 126
     494:	b0 e0       	ldi	r27, 0x00	; 0
     496:	01 90       	ld	r0, Z+
     498:	0d 92       	st	X+, r0
     49a:	2a 95       	dec	r18
     49c:	e1 f7       	brne	.-8      	; 0x496 <nrf24l01_settxaddr+0x16>
	uint8_t addrrev[NRF24L01_ADDRSIZE];
	nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     49e:	be 01       	movw	r22, r28
     4a0:	6f 5f       	subi	r22, 0xFF	; 255
     4a2:	7f 4f       	sbci	r23, 0xFF	; 255
     4a4:	0e 94 b1 01 	call	0x362	; 0x362 <nrf24l01_revaddress>
	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE); //set rx address for ack on pipe 0
     4a8:	45 e0       	ldi	r20, 0x05	; 5
     4aa:	be 01       	movw	r22, r28
     4ac:	6f 5f       	subi	r22, 0xFF	; 255
     4ae:	7f 4f       	sbci	r23, 0xFF	; 255
     4b0:	8a e0       	ldi	r24, 0x0A	; 10
     4b2:	0e 94 8d 01 	call	0x31a	; 0x31a <nrf24l01_writeregisters>
	nrf24l01_writeregisters(NRF24L01_REG_TX_ADDR, addrrev, NRF24L01_ADDRSIZE); //set tx address
     4b6:	45 e0       	ldi	r20, 0x05	; 5
     4b8:	be 01       	movw	r22, r28
     4ba:	6f 5f       	subi	r22, 0xFF	; 255
     4bc:	7f 4f       	sbci	r23, 0xFF	; 255
     4be:	80 e1       	ldi	r24, 0x10	; 16
     4c0:	0e 94 8d 01 	call	0x31a	; 0x31a <nrf24l01_writeregisters>
}
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	08 95       	ret

000004d4 <nrf24l01_flushRXfifo>:

/*
 * flush RX fifo
 */
void nrf24l01_flushRXfifo() {
	nrf24l01_CSNlo; //low CSN
     4d4:	c1 98       	cbi	0x18, 1	; 24
	spi_writereadbyte(NRF24L01_CMD_FLUSH_RX);
     4d6:	82 ee       	ldi	r24, 0xE2	; 226
     4d8:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     4dc:	c1 9a       	sbi	0x18, 1	; 24
     4de:	08 95       	ret

000004e0 <nrf24l01_flushTXfifo>:

/*
 * flush RX fifo
 */
void nrf24l01_flushTXfifo() {
	nrf24l01_CSNlo; //low CSN
     4e0:	c1 98       	cbi	0x18, 1	; 24
	spi_writereadbyte(NRF24L01_CMD_FLUSH_TX);
     4e2:	81 ee       	ldi	r24, 0xE1	; 225
     4e4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     4e8:	c1 9a       	sbi	0x18, 1	; 24
     4ea:	08 95       	ret

000004ec <nrf24l01_setRX>:

/*
 * set chip as RX
 */
void nrf24l01_setRX() {
	nrf24l01_setrxaddr(0, nrf24l01_addr0); //restore pipe 0 address
     4ec:	60 e6       	ldi	r22, 0x60	; 96
     4ee:	70 e0       	ldi	r23, 0x00	; 0
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	0e 94 c2 01 	call	0x384	; 0x384 <nrf24l01_setrxaddr>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PRIM_RX)); //prx mode
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	0e 94 77 01 	call	0x2ee	; 0x2ee <nrf24l01_readregister>
     4fc:	68 2f       	mov	r22, r24
     4fe:	61 60       	ori	r22, 0x01	; 1
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	0e 94 77 01 	call	0x2ee	; 0x2ee <nrf24l01_readregister>
     50c:	68 2f       	mov	r22, r24
     50e:	62 60       	ori	r22, 0x02	; 2
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     516:	60 e7       	ldi	r22, 0x70	; 112
     518:	87 e0       	ldi	r24, 0x07	; 7
     51a:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
	nrf24l01_flushRXfifo(); //flush rx fifo
     51e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <nrf24l01_flushRXfifo>
	nrf24l01_flushTXfifo(); //flush tx fifo
     522:	0e 94 70 02 	call	0x4e0	; 0x4e0 <nrf24l01_flushTXfifo>
	nrf24l01_CEhi; //start listening
     526:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     528:	87 e5       	ldi	r24, 0x57	; 87
     52a:	92 e0       	ldi	r25, 0x02	; 2
     52c:	01 97       	sbiw	r24, 0x01	; 1
     52e:	f1 f7       	brne	.-4      	; 0x52c <nrf24l01_setRX+0x40>
     530:	00 c0       	rjmp	.+0      	; 0x532 <nrf24l01_setRX+0x46>
     532:	00 00       	nop
     534:	08 95       	ret

00000536 <nrf24l01_setTX>:

/*
 * set chip as TX
 */
void nrf24l01_setTX() {
	nrf24l01_CElo; //stop listening
     536:	c0 98       	cbi	0x18, 0	; 24
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PRIM_RX)); //ptx mode
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	0e 94 77 01 	call	0x2ee	; 0x2ee <nrf24l01_readregister>
     53e:	68 2f       	mov	r22, r24
     540:	6e 7f       	andi	r22, 0xFE	; 254
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	0e 94 77 01 	call	0x2ee	; 0x2ee <nrf24l01_readregister>
     54e:	68 2f       	mov	r22, r24
     550:	62 60       	ori	r22, 0x02	; 2
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     558:	60 e7       	ldi	r22, 0x70	; 112
     55a:	87 e0       	ldi	r24, 0x07	; 7
     55c:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
	nrf24l01_flushTXfifo(); //flush tx fifo
     560:	0e 94 70 02 	call	0x4e0	; 0x4e0 <nrf24l01_flushTXfifo>
     564:	87 e5       	ldi	r24, 0x57	; 87
     566:	92 e0       	ldi	r25, 0x02	; 2
     568:	01 97       	sbiw	r24, 0x01	; 1
     56a:	f1 f7       	brne	.-4      	; 0x568 <nrf24l01_setTX+0x32>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <nrf24l01_setTX+0x38>
     56e:	00 00       	nop
     570:	08 95       	ret

00000572 <nrf24l01_getstatus>:
/*
 * get status register
 */
uint8_t nrf24l01_getstatus() {
	uint8_t status = 0;
	nrf24l01_CSNlo; //low CSN
     572:	c1 98       	cbi	0x18, 1	; 24
	status = spi_writereadbyte(NRF24L01_CMD_NOP); //get status, send NOP request
     574:	8f ef       	ldi	r24, 0xFF	; 255
     576:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     57a:	c1 9a       	sbi	0x18, 1	; 24
	return status;
}
     57c:	08 95       	ret

0000057e <nrf24l01_setpalevel>:

/*
 * set power level
 */
void nrf24l01_setpalevel() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP);
     57e:	86 e0       	ldi	r24, 0x06	; 6
     580:	0e 94 77 01 	call	0x2ee	; 0x2ee <nrf24l01_readregister>
  setup &= ~((1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH));

  if (NRF24L01_RF24_PA == NRF24L01_RF24_PA_MAX) {
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
     584:	68 2f       	mov	r22, r24
     586:	66 60       	ori	r22, 0x06	; 6
  } else {
	  //default is max power
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     588:	86 e0       	ldi	r24, 0x06	; 6
     58a:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
     58e:	08 95       	ret

00000590 <nrf24l01_setdatarate>:

/*
 * set datarate
 */
void nrf24l01_setdatarate() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP) ;
     590:	86 e0       	ldi	r24, 0x06	; 6
     592:	0e 94 77 01 	call	0x2ee	; 0x2ee <nrf24l01_readregister>

  setup &= ~((1<<NRF24L01_REG_RF_DR_LOW) | (1<<NRF24L01_REG_RF_DR_HIGH));
     596:	68 2f       	mov	r22, r24
     598:	67 7d       	andi	r22, 0xD7	; 215
    } else {
    	//default is 1Mbps
    }
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     59a:	86 e0       	ldi	r24, 0x06	; 6
     59c:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
     5a0:	08 95       	ret

000005a2 <nrf24l01_setcrclength>:

/*
 * set crc length
 */
void nrf24l01_setcrclength() {
  uint8_t config = nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~((1<<NRF24L01_REG_CRCO) | (1<<NRF24L01_REG_EN_CRC));
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	0e 94 77 01 	call	0x2ee	; 0x2ee <nrf24l01_readregister>
	  //nothing
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_8) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_16) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
	  config |= (1<<NRF24L01_REG_CRCO);
     5a8:	68 2f       	mov	r22, r24
     5aa:	6c 60       	ori	r22, 0x0C	; 12
  } else {
	  //default is disabled
  }

  nrf24l01_writeregister(NRF24L01_REG_CONFIG, config);
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
     5b2:	08 95       	ret

000005b4 <nrf24l01_init>:
/*
 * init nrf24l01
 */
void nrf24l01_init() {
	//setup port
	NRF24L01_DDR |= (1<<NRF24L01_CSN); //output
     5b4:	b9 9a       	sbi	0x17, 1	; 23
	NRF24L01_DDR |= (1<<NRF24L01_CE); //output
     5b6:	b8 9a       	sbi	0x17, 0	; 23

    spi_init(); //init spi
     5b8:	0e 94 67 01 	call	0x2ce	; 0x2ce <spi_init>

    nrf24l01_CElo; //low CE
     5bc:	c0 98       	cbi	0x18, 0	; 24
    nrf24l01_CSNhi; //high CSN
     5be:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5c0:	8f e1       	ldi	r24, 0x1F	; 31
     5c2:	9e e4       	ldi	r25, 0x4E	; 78
     5c4:	01 97       	sbiw	r24, 0x01	; 1
     5c6:	f1 f7       	brne	.-4      	; 0x5c4 <nrf24l01_init+0x10>
     5c8:	00 c0       	rjmp	.+0      	; 0x5ca <nrf24l01_init+0x16>
     5ca:	00 00       	nop

    _delay_ms(5); //wait for the radio to init

    nrf24l01_setpalevel(); //set power level
     5cc:	0e 94 bf 02 	call	0x57e	; 0x57e <nrf24l01_setpalevel>
    nrf24l01_setdatarate(); //set data rate
     5d0:	0e 94 c8 02 	call	0x590	; 0x590 <nrf24l01_setdatarate>
    nrf24l01_setcrclength(); //set crc length
     5d4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <nrf24l01_setcrclength>
    nrf24l01_writeregister(NRF24L01_REG_SETUP_RETR, NRF24L01_RETR); // set retries
     5d8:	67 e4       	ldi	r22, 0x47	; 71
     5da:	84 e0       	ldi	r24, 0x04	; 4
     5dc:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_DYNPD, 0); //disable dynamic payloads
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	8c e1       	ldi	r24, 0x1C	; 28
     5e4:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH); //set RF channel
     5e8:	6c e4       	ldi	r22, 0x4C	; 76
     5ea:	85 e0       	ldi	r24, 0x05	; 5
     5ec:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>

	//payload size
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P0, NRF24L01_PAYLOAD);
     5f0:	60 e1       	ldi	r22, 0x10	; 16
     5f2:	81 e1       	ldi	r24, 0x11	; 17
     5f4:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P1, NRF24L01_PAYLOAD);
     5f8:	60 e1       	ldi	r22, 0x10	; 16
     5fa:	82 e1       	ldi	r24, 0x12	; 18
     5fc:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P2, NRF24L01_PAYLOAD);
     600:	60 e1       	ldi	r22, 0x10	; 16
     602:	83 e1       	ldi	r24, 0x13	; 19
     604:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P3, NRF24L01_PAYLOAD);
     608:	60 e1       	ldi	r22, 0x10	; 16
     60a:	84 e1       	ldi	r24, 0x14	; 20
     60c:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P4, NRF24L01_PAYLOAD);
     610:	60 e1       	ldi	r22, 0x10	; 16
     612:	85 e1       	ldi	r24, 0x15	; 21
     614:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P5, NRF24L01_PAYLOAD);
     618:	60 e1       	ldi	r22, 0x10	; 16
     61a:	86 e1       	ldi	r24, 0x16	; 22
     61c:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
	#endif

	//enable pipe
	nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, 0);
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P0));
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	0e 94 77 01 	call	0x2ee	; 0x2ee <nrf24l01_readregister>
     62e:	68 2f       	mov	r22, r24
     630:	61 60       	ori	r22, 0x01	; 1
     632:	82 e0       	ldi	r24, 0x02	; 2
     634:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P1));
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	0e 94 77 01 	call	0x2ee	; 0x2ee <nrf24l01_readregister>
     63e:	68 2f       	mov	r22, r24
     640:	62 60       	ori	r22, 0x02	; 2
     642:	82 e0       	ldi	r24, 0x02	; 2
     644:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P2));
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	0e 94 77 01 	call	0x2ee	; 0x2ee <nrf24l01_readregister>
     64e:	68 2f       	mov	r22, r24
     650:	64 60       	ori	r22, 0x04	; 4
     652:	82 e0       	ldi	r24, 0x02	; 2
     654:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P3));
     658:	82 e0       	ldi	r24, 0x02	; 2
     65a:	0e 94 77 01 	call	0x2ee	; 0x2ee <nrf24l01_readregister>
     65e:	68 2f       	mov	r22, r24
     660:	68 60       	ori	r22, 0x08	; 8
     662:	82 e0       	ldi	r24, 0x02	; 2
     664:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P4));
     668:	82 e0       	ldi	r24, 0x02	; 2
     66a:	0e 94 77 01 	call	0x2ee	; 0x2ee <nrf24l01_readregister>
     66e:	68 2f       	mov	r22, r24
     670:	60 61       	ori	r22, 0x10	; 16
     672:	82 e0       	ldi	r24, 0x02	; 2
     674:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P5));
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	0e 94 77 01 	call	0x2ee	; 0x2ee <nrf24l01_readregister>
     67e:	68 2f       	mov	r22, r24
     680:	60 62       	ori	r22, 0x20	; 32
     682:	82 e0       	ldi	r24, 0x02	; 2
     684:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
	#endif

	//auto ack
	#if NRF24L01_ACK == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P0));
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	0e 94 77 01 	call	0x2ee	; 0x2ee <nrf24l01_readregister>
     68e:	68 2f       	mov	r22, r24
     690:	61 60       	ori	r22, 0x01	; 1
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P1));
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	0e 94 77 01 	call	0x2ee	; 0x2ee <nrf24l01_readregister>
     69e:	68 2f       	mov	r22, r24
     6a0:	62 60       	ori	r22, 0x02	; 2
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P2));
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	0e 94 77 01 	call	0x2ee	; 0x2ee <nrf24l01_readregister>
     6ae:	68 2f       	mov	r22, r24
     6b0:	64 60       	ori	r22, 0x04	; 4
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P3));
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	0e 94 77 01 	call	0x2ee	; 0x2ee <nrf24l01_readregister>
     6be:	68 2f       	mov	r22, r24
     6c0:	68 60       	ori	r22, 0x08	; 8
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P4));
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	0e 94 77 01 	call	0x2ee	; 0x2ee <nrf24l01_readregister>
     6ce:	68 2f       	mov	r22, r24
     6d0:	60 61       	ori	r22, 0x10	; 16
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P5));
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	0e 94 77 01 	call	0x2ee	; 0x2ee <nrf24l01_readregister>
     6de:	68 2f       	mov	r22, r24
     6e0:	60 62       	ori	r22, 0x20	; 32
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P4));
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P5));
	#endif

	//rx address
	nrf24l01_setrxaddr(0, nrf24l01_addr0);
     6e8:	60 e6       	ldi	r22, 0x60	; 96
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	0e 94 c2 01 	call	0x384	; 0x384 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(1, nrf24l01_addr1);
     6f2:	65 e6       	ldi	r22, 0x65	; 101
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	0e 94 c2 01 	call	0x384	; 0x384 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(2, nrf24l01_addr2);
     6fc:	6a e6       	ldi	r22, 0x6A	; 106
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	82 e0       	ldi	r24, 0x02	; 2
     702:	0e 94 c2 01 	call	0x384	; 0x384 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(3, nrf24l01_addr3);
     706:	6f e6       	ldi	r22, 0x6F	; 111
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	83 e0       	ldi	r24, 0x03	; 3
     70c:	0e 94 c2 01 	call	0x384	; 0x384 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(4, nrf24l01_addr4);
     710:	64 e7       	ldi	r22, 0x74	; 116
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	84 e0       	ldi	r24, 0x04	; 4
     716:	0e 94 c2 01 	call	0x384	; 0x384 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(5, nrf24l01_addr5);
     71a:	69 e7       	ldi	r22, 0x79	; 121
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	85 e0       	ldi	r24, 0x05	; 5
     720:	0e 94 c2 01 	call	0x384	; 0x384 <nrf24l01_setrxaddr>

	//tx address
	nrf24l01_settxaddr(nrf24l01_addrtx);
     724:	8e e7       	ldi	r24, 0x7E	; 126
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 40 02 	call	0x480	; 0x480 <nrf24l01_settxaddr>

	//set rx mode
	nrf24l01_setRX();
     72c:	0e 94 76 02 	call	0x4ec	; 0x4ec <nrf24l01_setRX>
     730:	08 95       	ret

00000732 <nrf24l01_writestr>:
//role definitions
#define ROLETX 1
#define ROLERX 0

uint8_t nrf24l01_writestr(char *data)
{
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	08 2f       	mov	r16, r24
     73c:	19 2f       	mov	r17, r25
	uint8_t i = 0;
	uint8_t ret = 0;

	//set tx mode
	nrf24l01_setTX();
     73e:	0e 94 9b 02 	call	0x536	; 0x536 <nrf24l01_setTX>

	//write data
	nrf24l01_CSNlo; //low CSN
     742:	c1 98       	cbi	0x18, 1	; 24
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
     744:	80 ea       	ldi	r24, 0xA0	; 160
     746:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_writereadbyte>
     74a:	c0 2f       	mov	r28, r16
     74c:	d1 2f       	mov	r29, r17
	for (i=0; i<NRF24L01_PAYLOAD; i++)
     74e:	10 e0       	ldi	r17, 0x00	; 0
	spi_writereadbyte(data[i]);
     750:	89 91       	ld	r24, Y+
     752:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_writereadbyte>
	nrf24l01_setTX();

	//write data
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
	for (i=0; i<NRF24L01_PAYLOAD; i++)
     756:	1f 5f       	subi	r17, 0xFF	; 255
     758:	10 31       	cpi	r17, 0x10	; 16
     75a:	d1 f7       	brne	.-12     	; 0x750 <nrf24l01_writestr+0x1e>
	spi_writereadbyte(data[i]);
	nrf24l01_CSNhi; //high CSN
     75c:	c1 9a       	sbi	0x18, 1	; 24

	//start transmission
	nrf24l01_CEhi; //high CE
     75e:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     760:	80 e5       	ldi	r24, 0x50	; 80
     762:	8a 95       	dec	r24
     764:	f1 f7       	brne	.-4      	; 0x762 <nrf24l01_writestr+0x30>
	_delay_us(15);
	nrf24l01_CElo; //low CE
     766:	c0 98       	cbi	0x18, 0	; 24
     768:	85 e3       	ldi	r24, 0x35	; 53
     76a:	8a 95       	dec	r24
     76c:	f1 f7       	brne	.-4      	; 0x76a <nrf24l01_writestr+0x38>
     76e:	00 00       	nop

	//stop if max_retries reached or send is ok
	do {
		_delay_us(10);
	}
	while( !(nrf24l01_getstatus() & (1<<NRF24L01_REG_MAX_RT | 1<<NRF24L01_REG_TX_DS)) );
     770:	0e 94 b9 02 	call	0x572	; 0x572 <nrf24l01_getstatus>
     774:	80 73       	andi	r24, 0x30	; 48
     776:	c1 f3       	breq	.-16     	; 0x768 <nrf24l01_writestr+0x36>

	if(nrf24l01_getstatus() & 1<<NRF24L01_REG_TX_DS)
     778:	0e 94 b9 02 	call	0x572	; 0x572 <nrf24l01_getstatus>
     77c:	c8 2f       	mov	r28, r24
	ret = 1;

	//reset PLOS_CNT
	nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH);
     77e:	6c e4       	ldi	r22, 0x4C	; 76
     780:	85 e0       	ldi	r24, 0x05	; 5
     782:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>

	//power down
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PWR_UP));
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	0e 94 77 01 	call	0x2ee	; 0x2ee <nrf24l01_readregister>
     78c:	68 2f       	mov	r22, r24
     78e:	6d 7f       	andi	r22, 0xFD	; 253
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	0e 94 80 01 	call	0x300	; 0x300 <nrf24l01_writeregister>

	//set rx mode
	nrf24l01_setRX();
     796:	0e 94 76 02 	call	0x4ec	; 0x4ec <nrf24l01_setRX>

	return ret;
}
     79a:	c5 fb       	bst	r28, 5
     79c:	88 27       	eor	r24, r24
     79e:	80 f9       	bld	r24, 0
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	08 95       	ret

000007aa <__vector_6>:
	tag2=~tag2;
}

/*Timer Counter 1 Compare Match A Interrupt Service Routine/Interrupt Handler*/
ISR(TIMER1_COMPA_vect)
{	
     7aa:	1f 92       	push	r1
     7ac:	0f 92       	push	r0
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	0f 92       	push	r0
     7b2:	11 24       	eor	r1, r1
     7b4:	2f 93       	push	r18
     7b6:	8f 93       	push	r24
     7b8:	9f 93       	push	r25
	ms++;
     7ba:	80 91 77 01 	lds	r24, 0x0177
     7be:	90 91 78 01 	lds	r25, 0x0178
     7c2:	01 96       	adiw	r24, 0x01	; 1
     7c4:	90 93 78 01 	sts	0x0178, r25
     7c8:	80 93 77 01 	sts	0x0177, r24
	
	if(ms == 1000)
     7cc:	80 91 77 01 	lds	r24, 0x0177
     7d0:	90 91 78 01 	lds	r25, 0x0178
     7d4:	88 3e       	cpi	r24, 0xE8	; 232
     7d6:	93 40       	sbci	r25, 0x03	; 3
     7d8:	69 f4       	brne	.+26     	; 0x7f4 <__vector_6+0x4a>
	{
		ms=0;
     7da:	10 92 78 01 	sts	0x0178, r1
     7de:	10 92 77 01 	sts	0x0177, r1
		seconds++;
     7e2:	80 91 97 01 	lds	r24, 0x0197
     7e6:	90 91 98 01 	lds	r25, 0x0198
     7ea:	01 96       	adiw	r24, 0x01	; 1
     7ec:	90 93 98 01 	sts	0x0198, r25
     7f0:	80 93 97 01 	sts	0x0197, r24
	}
	if(seconds == 60)
     7f4:	80 91 97 01 	lds	r24, 0x0197
     7f8:	90 91 98 01 	lds	r25, 0x0198
     7fc:	cc 97       	sbiw	r24, 0x3c	; 60
     7fe:	69 f4       	brne	.+26     	; 0x81a <__vector_6+0x70>
	{
		seconds = 0;
     800:	10 92 98 01 	sts	0x0198, r1
     804:	10 92 97 01 	sts	0x0197, r1
		minutes++;
     808:	80 91 b6 01 	lds	r24, 0x01B6
     80c:	90 91 b7 01 	lds	r25, 0x01B7
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	90 93 b7 01 	sts	0x01B7, r25
     816:	80 93 b6 01 	sts	0x01B6, r24
	}
	if(minutes == 60)
     81a:	80 91 b6 01 	lds	r24, 0x01B6
     81e:	90 91 b7 01 	lds	r25, 0x01B7
     822:	cc 97       	sbiw	r24, 0x3c	; 60
     824:	69 f4       	brne	.+26     	; 0x840 <__vector_6+0x96>
	{
		minutes = 0;
     826:	10 92 b7 01 	sts	0x01B7, r1
     82a:	10 92 b6 01 	sts	0x01B6, r1
		hours++;
     82e:	80 91 ba 01 	lds	r24, 0x01BA
     832:	90 91 bb 01 	lds	r25, 0x01BB
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	90 93 bb 01 	sts	0x01BB, r25
     83c:	80 93 ba 01 	sts	0x01BA, r24
	}
	if(hours > 23)
     840:	80 91 ba 01 	lds	r24, 0x01BA
     844:	90 91 bb 01 	lds	r25, 0x01BB
     848:	48 97       	sbiw	r24, 0x18	; 24
     84a:	24 f0       	brlt	.+8      	; 0x854 <__vector_6+0xaa>
	hours = 0;
     84c:	10 92 bb 01 	sts	0x01BB, r1
     850:	10 92 ba 01 	sts	0x01BA, r1
}
     854:	9f 91       	pop	r25
     856:	8f 91       	pop	r24
     858:	2f 91       	pop	r18
     85a:	0f 90       	pop	r0
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	0f 90       	pop	r0
     860:	1f 90       	pop	r1
     862:	18 95       	reti

00000864 <init_interrupt>:
void init_interrupt()
{


	// disable interrupts while initializing
	cli();
     864:	f8 94       	cli
	// initialize the global state
	global_counts_m1 = eeprom_read_dword(&count1);
     866:	88 e0       	ldi	r24, 0x08	; 8
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__eerd_dword_m16>
     86e:	46 2f       	mov	r20, r22
     870:	57 2f       	mov	r21, r23
     872:	68 2f       	mov	r22, r24
     874:	79 2f       	mov	r23, r25
     876:	40 93 45 01 	sts	0x0145, r20
     87a:	50 93 46 01 	sts	0x0146, r21
     87e:	60 93 47 01 	sts	0x0147, r22
     882:	70 93 48 01 	sts	0x0148, r23
	global_counts_m2 = eeprom_read_dword(&count2);
     886:	84 e0       	ldi	r24, 0x04	; 4
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__eerd_dword_m16>
     88e:	46 2f       	mov	r20, r22
     890:	57 2f       	mov	r21, r23
     892:	68 2f       	mov	r22, r24
     894:	79 2f       	mov	r23, r25
     896:	40 93 84 01 	sts	0x0184, r20
     89a:	50 93 85 01 	sts	0x0185, r21
     89e:	60 93 86 01 	sts	0x0186, r22
     8a2:	70 93 87 01 	sts	0x0187, r23
	global_counts_m3 = eeprom_read_dword(&count3);
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__eerd_dword_m16>
     8ae:	46 2f       	mov	r20, r22
     8b0:	57 2f       	mov	r21, r23
     8b2:	68 2f       	mov	r22, r24
     8b4:	79 2f       	mov	r23, r25
     8b6:	40 93 61 01 	sts	0x0161, r20
     8ba:	50 93 62 01 	sts	0x0162, r21
     8be:	60 93 63 01 	sts	0x0163, r22
     8c2:	70 93 64 01 	sts	0x0164, r23
	
	
	ms=0;
     8c6:	10 92 78 01 	sts	0x0178, r1
     8ca:	10 92 77 01 	sts	0x0177, r1
	seconds=0;
     8ce:	10 92 98 01 	sts	0x0198, r1
     8d2:	10 92 97 01 	sts	0x0197, r1
	minutes=0;
     8d6:	10 92 b7 01 	sts	0x01B7, r1
     8da:	10 92 b6 01 	sts	0x01B6, r1
	hours=0;
     8de:	10 92 bb 01 	sts	0x01BB, r1
     8e2:	10 92 ba 01 	sts	0x01BA, r1
	
	tag0=0x00;
     8e6:	10 92 bc 01 	sts	0x01BC, r1
	tag1=0x00;
     8ea:	10 92 79 01 	sts	0x0179, r1
	tag2=0x00;
     8ee:	10 92 92 01 	sts	0x0192, r1
	
	 //timer is in "CTC" mode
	TCCR1B=(1<<CS10)|(1<<CS11)|(1<<WGM12);	   // Set up prescaler for CLK/64
     8f2:	8b e0       	ldi	r24, 0x0B	; 11
     8f4:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 250;
     8f6:	8a ef       	ldi	r24, 0xFA	; 250
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	9b bd       	out	0x2b, r25	; 43
     8fc:	8a bd       	out	0x2a, r24	; 42
	TIMSK = 1<<OCIE1A;
     8fe:	80 e1       	ldi	r24, 0x10	; 16
     900:	89 bf       	out	0x39, r24	; 57


	GICR=(1<<INT0)|(1<<INT1)|(1<<INT2);
     902:	80 ee       	ldi	r24, 0xE0	; 224
     904:	8b bf       	out	0x3b, r24	; 59
	MCUCR = (1 << ISC11) | (1 << ISC10) | (1 << ISC01) | (1 << ISC00);
     906:	8f e0       	ldi	r24, 0x0F	; 15
     908:	85 bf       	out	0x35, r24	; 53
	MCUCSR=1<<ISC2;
     90a:	80 e4       	ldi	r24, 0x40	; 64
     90c:	84 bf       	out	0x34, r24	; 52
			
	sei();
     90e:	78 94       	sei
     910:	08 95       	ret

00000912 <get_counts_m1>:
}

long get_counts_m1()
{
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
	cli();
     916:	f8 94       	cli
	long tmp = global_counts_m1;
     918:	00 91 45 01 	lds	r16, 0x0145
     91c:	10 91 46 01 	lds	r17, 0x0146
     920:	20 91 47 01 	lds	r18, 0x0147
     924:	30 91 48 01 	lds	r19, 0x0148
	sei();
     928:	78 94       	sei
	return tmp;
}
     92a:	60 2f       	mov	r22, r16
     92c:	71 2f       	mov	r23, r17
     92e:	82 2f       	mov	r24, r18
     930:	93 2f       	mov	r25, r19
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
     936:	08 95       	ret

00000938 <get_counts_m2>:
long get_counts_m2()
{
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
	cli();
     93c:	f8 94       	cli
	long tmp1 = global_counts_m2;
     93e:	00 91 84 01 	lds	r16, 0x0184
     942:	10 91 85 01 	lds	r17, 0x0185
     946:	20 91 86 01 	lds	r18, 0x0186
     94a:	30 91 87 01 	lds	r19, 0x0187
	sei();
     94e:	78 94       	sei
	return tmp1;
}
     950:	60 2f       	mov	r22, r16
     952:	71 2f       	mov	r23, r17
     954:	82 2f       	mov	r24, r18
     956:	93 2f       	mov	r25, r19
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	08 95       	ret

0000095e <get_counts_m3>:
long get_counts_m3()
{
     95e:	0f 93       	push	r16
     960:	1f 93       	push	r17
	cli();
     962:	f8 94       	cli
	long tmp2 = global_counts_m3;
     964:	00 91 61 01 	lds	r16, 0x0161
     968:	10 91 62 01 	lds	r17, 0x0162
     96c:	20 91 63 01 	lds	r18, 0x0163
     970:	30 91 64 01 	lds	r19, 0x0164
	sei();
     974:	78 94       	sei
	return tmp2;
}
     976:	60 2f       	mov	r22, r16
     978:	71 2f       	mov	r23, r17
     97a:	82 2f       	mov	r24, r18
     97c:	93 2f       	mov	r25, r19
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	08 95       	ret

00000984 <get_time>:
long get_time()
{
     984:	8f 92       	push	r8
     986:	9f 92       	push	r9
     988:	af 92       	push	r10
     98a:	bf 92       	push	r11
     98c:	cf 92       	push	r12
     98e:	df 92       	push	r13
     990:	ef 92       	push	r14
     992:	ff 92       	push	r15
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
	cli();
     998:	f8 94       	cli
	long time = ms + 1000*seconds + (long)1000*60*minutes + (long)1000*60*60*hours; 
     99a:	60 91 97 01 	lds	r22, 0x0197
     99e:	70 91 98 01 	lds	r23, 0x0198
     9a2:	80 91 77 01 	lds	r24, 0x0177
     9a6:	90 91 78 01 	lds	r25, 0x0178
     9aa:	a0 91 b6 01 	lds	r26, 0x01B6
     9ae:	b0 91 b7 01 	lds	r27, 0x01B7
     9b2:	40 91 ba 01 	lds	r20, 0x01BA
     9b6:	50 91 bb 01 	lds	r21, 0x01BB
	sei();
     9ba:	78 94       	sei
	return tmp2;
}
long get_time()
{
	cli();
	long time = ms + 1000*seconds + (long)1000*60*minutes + (long)1000*60*60*hours; 
     9bc:	28 ee       	ldi	r18, 0xE8	; 232
     9be:	33 e0       	ldi	r19, 0x03	; 3
     9c0:	62 9f       	mul	r22, r18
     9c2:	40 01       	movw	r8, r0
     9c4:	63 9f       	mul	r22, r19
     9c6:	90 0c       	add	r9, r0
     9c8:	72 9f       	mul	r23, r18
     9ca:	90 0c       	add	r9, r0
     9cc:	11 24       	eor	r1, r1
     9ce:	88 0e       	add	r8, r24
     9d0:	99 1e       	adc	r9, r25
     9d2:	aa 24       	eor	r10, r10
     9d4:	97 fc       	sbrc	r9, 7
     9d6:	a0 94       	com	r10
     9d8:	ba 2c       	mov	r11, r10
     9da:	20 e6       	ldi	r18, 0x60	; 96
     9dc:	3a ee       	ldi	r19, 0xEA	; 234
     9de:	0e 94 8f 09 	call	0x131e	; 0x131e <__usmulhisi3>
     9e2:	75 01       	movw	r14, r10
     9e4:	64 01       	movw	r12, r8
     9e6:	c6 0e       	add	r12, r22
     9e8:	d7 1e       	adc	r13, r23
     9ea:	e8 1e       	adc	r14, r24
     9ec:	f9 1e       	adc	r15, r25
     9ee:	da 01       	movw	r26, r20
     9f0:	20 e8       	ldi	r18, 0x80	; 128
     9f2:	3e ee       	ldi	r19, 0xEE	; 238
     9f4:	46 e3       	ldi	r20, 0x36	; 54
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	0e 94 96 09 	call	0x132c	; 0x132c <__mulshisi3>
     9fc:	97 01       	movw	r18, r14
     9fe:	86 01       	movw	r16, r12
     a00:	06 0f       	add	r16, r22
     a02:	17 1f       	adc	r17, r23
     a04:	28 1f       	adc	r18, r24
     a06:	39 1f       	adc	r19, r25
	sei();
	return time;	
}
     a08:	60 2f       	mov	r22, r16
     a0a:	71 2f       	mov	r23, r17
     a0c:	82 2f       	mov	r24, r18
     a0e:	93 2f       	mov	r25, r19
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	ff 90       	pop	r15
     a16:	ef 90       	pop	r14
     a18:	df 90       	pop	r13
     a1a:	cf 90       	pop	r12
     a1c:	bf 90       	pop	r11
     a1e:	af 90       	pop	r10
     a20:	9f 90       	pop	r9
     a22:	8f 90       	pop	r8
     a24:	08 95       	ret

00000a26 <__vector_18>:
		ltoa(load1,b,10);
	}
	tag1=~tag1;	
}
ISR(INT2_vect)
{
     a26:	1f 92       	push	r1
     a28:	0f 92       	push	r0
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	0f 92       	push	r0
     a2e:	11 24       	eor	r1, r1
     a30:	2f 93       	push	r18
     a32:	3f 93       	push	r19
     a34:	4f 93       	push	r20
     a36:	5f 93       	push	r21
     a38:	6f 93       	push	r22
     a3a:	7f 93       	push	r23
     a3c:	8f 93       	push	r24
     a3e:	9f 93       	push	r25
     a40:	af 93       	push	r26
     a42:	bf 93       	push	r27
     a44:	ef 93       	push	r30
     a46:	ff 93       	push	r31
	global_counts_m3 += 1;
     a48:	80 91 61 01 	lds	r24, 0x0161
     a4c:	90 91 62 01 	lds	r25, 0x0162
     a50:	a0 91 63 01 	lds	r26, 0x0163
     a54:	b0 91 64 01 	lds	r27, 0x0164
     a58:	01 96       	adiw	r24, 0x01	; 1
     a5a:	a1 1d       	adc	r26, r1
     a5c:	b1 1d       	adc	r27, r1
     a5e:	80 93 61 01 	sts	0x0161, r24
     a62:	90 93 62 01 	sts	0x0162, r25
     a66:	a0 93 63 01 	sts	0x0163, r26
     a6a:	b0 93 64 01 	sts	0x0164, r27
	eeprom_update_dword(&count3,global_counts_m3);
     a6e:	40 91 61 01 	lds	r20, 0x0161
     a72:	50 91 62 01 	lds	r21, 0x0162
     a76:	60 91 63 01 	lds	r22, 0x0163
     a7a:	70 91 64 01 	lds	r23, 0x0164
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 32 0a 	call	0x1464	; 0x1464 <__eeupd_dword_m16>
	
	if (tag2==0x00)
     a86:	80 91 92 01 	lds	r24, 0x0192
     a8a:	81 11       	cpse	r24, r1
     a8c:	0e c0       	rjmp	.+28     	; 0xaaa <__vector_18+0x84>
	{
		time20=get_time();
     a8e:	0e 94 c2 04 	call	0x984	; 0x984 <get_time>
     a92:	46 2f       	mov	r20, r22
     a94:	57 2f       	mov	r21, r23
     a96:	68 2f       	mov	r22, r24
     a98:	79 2f       	mov	r23, r25
     a9a:	40 93 b2 01 	sts	0x01B2, r20
     a9e:	50 93 b3 01 	sts	0x01B3, r21
     aa2:	60 93 b4 01 	sts	0x01B4, r22
     aa6:	70 93 b5 01 	sts	0x01B5, r23
	}

	if (tag2==0xff)
     aaa:	80 91 92 01 	lds	r24, 0x0192
     aae:	8f 3f       	cpi	r24, 0xFF	; 255
     ab0:	09 f0       	breq	.+2      	; 0xab4 <__vector_18+0x8e>
     ab2:	40 c0       	rjmp	.+128    	; 0xb34 <__vector_18+0x10e>
	{
		time21=get_time();
     ab4:	0e 94 c2 04 	call	0x984	; 0x984 <get_time>
     ab8:	46 2f       	mov	r20, r22
     aba:	57 2f       	mov	r21, r23
     abc:	68 2f       	mov	r22, r24
     abe:	79 2f       	mov	r23, r25
     ac0:	40 93 99 01 	sts	0x0199, r20
     ac4:	50 93 9a 01 	sts	0x019A, r21
     ac8:	60 93 9b 01 	sts	0x019B, r22
     acc:	70 93 9c 01 	sts	0x019C, r23
		timecalc2=time21-time20;
     ad0:	40 91 99 01 	lds	r20, 0x0199
     ad4:	50 91 9a 01 	lds	r21, 0x019A
     ad8:	60 91 9b 01 	lds	r22, 0x019B
     adc:	70 91 9c 01 	lds	r23, 0x019C
     ae0:	80 91 b2 01 	lds	r24, 0x01B2
     ae4:	90 91 b3 01 	lds	r25, 0x01B3
     ae8:	a0 91 b4 01 	lds	r26, 0x01B4
     aec:	b0 91 b5 01 	lds	r27, 0x01B5
     af0:	48 1b       	sub	r20, r24
     af2:	59 0b       	sbc	r21, r25
     af4:	50 93 c8 01 	sts	0x01C8, r21
     af8:	40 93 c7 01 	sts	0x01C7, r20
		load2=1125000/timecalc2;
     afc:	20 91 c7 01 	lds	r18, 0x01C7
     b00:	30 91 c8 01 	lds	r19, 0x01C8
     b04:	40 e0       	ldi	r20, 0x00	; 0
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	68 e8       	ldi	r22, 0x88	; 136
     b0a:	7a e2       	ldi	r23, 0x2A	; 42
     b0c:	81 e1       	ldi	r24, 0x11	; 17
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__divmodsi4>
     b14:	30 93 b9 01 	sts	0x01B9, r19
     b18:	20 93 b8 01 	sts	0x01B8, r18
		ltoa(load2,c,10);
     b1c:	60 91 b8 01 	lds	r22, 0x01B8
     b20:	70 91 b9 01 	lds	r23, 0x01B9
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	2a e0       	ldi	r18, 0x0A	; 10
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	48 e8       	ldi	r20, 0x88	; 136
     b2e:	51 e0       	ldi	r21, 0x01	; 1
     b30:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <ltoa>
	}
	tag2=~tag2;
     b34:	80 91 92 01 	lds	r24, 0x0192
     b38:	80 95       	com	r24
     b3a:	80 93 92 01 	sts	0x0192, r24
}
     b3e:	ff 91       	pop	r31
     b40:	ef 91       	pop	r30
     b42:	bf 91       	pop	r27
     b44:	af 91       	pop	r26
     b46:	9f 91       	pop	r25
     b48:	8f 91       	pop	r24
     b4a:	7f 91       	pop	r23
     b4c:	6f 91       	pop	r22
     b4e:	5f 91       	pop	r21
     b50:	4f 91       	pop	r20
     b52:	3f 91       	pop	r19
     b54:	2f 91       	pop	r18
     b56:	0f 90       	pop	r0
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	0f 90       	pop	r0
     b5c:	1f 90       	pop	r1
     b5e:	18 95       	reti

00000b60 <__vector_2>:
		ltoa(load0,a,10);
	}
	tag0=~tag0;
}
ISR(INT1_vect)
{
     b60:	1f 92       	push	r1
     b62:	0f 92       	push	r0
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	0f 92       	push	r0
     b68:	11 24       	eor	r1, r1
     b6a:	2f 93       	push	r18
     b6c:	3f 93       	push	r19
     b6e:	4f 93       	push	r20
     b70:	5f 93       	push	r21
     b72:	6f 93       	push	r22
     b74:	7f 93       	push	r23
     b76:	8f 93       	push	r24
     b78:	9f 93       	push	r25
     b7a:	af 93       	push	r26
     b7c:	bf 93       	push	r27
     b7e:	ef 93       	push	r30
     b80:	ff 93       	push	r31
	global_counts_m2 += 1;
     b82:	80 91 84 01 	lds	r24, 0x0184
     b86:	90 91 85 01 	lds	r25, 0x0185
     b8a:	a0 91 86 01 	lds	r26, 0x0186
     b8e:	b0 91 87 01 	lds	r27, 0x0187
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	a1 1d       	adc	r26, r1
     b96:	b1 1d       	adc	r27, r1
     b98:	80 93 84 01 	sts	0x0184, r24
     b9c:	90 93 85 01 	sts	0x0185, r25
     ba0:	a0 93 86 01 	sts	0x0186, r26
     ba4:	b0 93 87 01 	sts	0x0187, r27
	eeprom_update_dword(&count2,global_counts_m2);
     ba8:	40 91 84 01 	lds	r20, 0x0184
     bac:	50 91 85 01 	lds	r21, 0x0185
     bb0:	60 91 86 01 	lds	r22, 0x0186
     bb4:	70 91 87 01 	lds	r23, 0x0187
     bb8:	84 e0       	ldi	r24, 0x04	; 4
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 32 0a 	call	0x1464	; 0x1464 <__eeupd_dword_m16>
	
	if (tag1==0x00)
     bc0:	80 91 79 01 	lds	r24, 0x0179
     bc4:	81 11       	cpse	r24, r1
     bc6:	0e c0       	rjmp	.+28     	; 0xbe4 <__vector_2+0x84>
	{
		time10=get_time();
     bc8:	0e 94 c2 04 	call	0x984	; 0x984 <get_time>
     bcc:	46 2f       	mov	r20, r22
     bce:	57 2f       	mov	r21, r23
     bd0:	68 2f       	mov	r22, r24
     bd2:	79 2f       	mov	r23, r25
     bd4:	40 93 57 01 	sts	0x0157, r20
     bd8:	50 93 58 01 	sts	0x0158, r21
     bdc:	60 93 59 01 	sts	0x0159, r22
     be0:	70 93 5a 01 	sts	0x015A, r23
	}

	if (tag1==0xff)
     be4:	80 91 79 01 	lds	r24, 0x0179
     be8:	8f 3f       	cpi	r24, 0xFF	; 255
     bea:	09 f0       	breq	.+2      	; 0xbee <__vector_2+0x8e>
     bec:	40 c0       	rjmp	.+128    	; 0xc6e <__vector_2+0x10e>
	{
		time11=get_time();
     bee:	0e 94 c2 04 	call	0x984	; 0x984 <get_time>
     bf2:	46 2f       	mov	r20, r22
     bf4:	57 2f       	mov	r21, r23
     bf6:	68 2f       	mov	r22, r24
     bf8:	79 2f       	mov	r23, r25
     bfa:	40 93 7c 01 	sts	0x017C, r20
     bfe:	50 93 7d 01 	sts	0x017D, r21
     c02:	60 93 7e 01 	sts	0x017E, r22
     c06:	70 93 7f 01 	sts	0x017F, r23
	 	timecalc1=time11-time10;
     c0a:	40 91 7c 01 	lds	r20, 0x017C
     c0e:	50 91 7d 01 	lds	r21, 0x017D
     c12:	60 91 7e 01 	lds	r22, 0x017E
     c16:	70 91 7f 01 	lds	r23, 0x017F
     c1a:	80 91 57 01 	lds	r24, 0x0157
     c1e:	90 91 58 01 	lds	r25, 0x0158
     c22:	a0 91 59 01 	lds	r26, 0x0159
     c26:	b0 91 5a 01 	lds	r27, 0x015A
     c2a:	48 1b       	sub	r20, r24
     c2c:	59 0b       	sbc	r21, r25
     c2e:	50 93 66 01 	sts	0x0166, r21
     c32:	40 93 65 01 	sts	0x0165, r20
		load1=1125000/timecalc1;
     c36:	20 91 65 01 	lds	r18, 0x0165
     c3a:	30 91 66 01 	lds	r19, 0x0166
     c3e:	40 e0       	ldi	r20, 0x00	; 0
     c40:	50 e0       	ldi	r21, 0x00	; 0
     c42:	68 e8       	ldi	r22, 0x88	; 136
     c44:	7a e2       	ldi	r23, 0x2A	; 42
     c46:	81 e1       	ldi	r24, 0x11	; 17
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__divmodsi4>
     c4e:	30 93 7b 01 	sts	0x017B, r19
     c52:	20 93 7a 01 	sts	0x017A, r18
		ltoa(load1,b,10);
     c56:	60 91 7a 01 	lds	r22, 0x017A
     c5a:	70 91 7b 01 	lds	r23, 0x017B
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	2a e0       	ldi	r18, 0x0A	; 10
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	4d e4       	ldi	r20, 0x4D	; 77
     c68:	51 e0       	ldi	r21, 0x01	; 1
     c6a:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <ltoa>
	}
	tag1=~tag1;	
     c6e:	80 91 79 01 	lds	r24, 0x0179
     c72:	80 95       	com	r24
     c74:	80 93 79 01 	sts	0x0179, r24
}
     c78:	ff 91       	pop	r31
     c7a:	ef 91       	pop	r30
     c7c:	bf 91       	pop	r27
     c7e:	af 91       	pop	r26
     c80:	9f 91       	pop	r25
     c82:	8f 91       	pop	r24
     c84:	7f 91       	pop	r23
     c86:	6f 91       	pop	r22
     c88:	5f 91       	pop	r21
     c8a:	4f 91       	pop	r20
     c8c:	3f 91       	pop	r19
     c8e:	2f 91       	pop	r18
     c90:	0f 90       	pop	r0
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	0f 90       	pop	r0
     c96:	1f 90       	pop	r1
     c98:	18 95       	reti

00000c9a <__vector_1>:
	}
	
}

ISR(INT0_vect)
{
     c9a:	1f 92       	push	r1
     c9c:	0f 92       	push	r0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	0f 92       	push	r0
     ca2:	11 24       	eor	r1, r1
     ca4:	2f 93       	push	r18
     ca6:	3f 93       	push	r19
     ca8:	4f 93       	push	r20
     caa:	5f 93       	push	r21
     cac:	6f 93       	push	r22
     cae:	7f 93       	push	r23
     cb0:	8f 93       	push	r24
     cb2:	9f 93       	push	r25
     cb4:	af 93       	push	r26
     cb6:	bf 93       	push	r27
     cb8:	ef 93       	push	r30
     cba:	ff 93       	push	r31
	global_counts_m1 += 1;
     cbc:	80 91 45 01 	lds	r24, 0x0145
     cc0:	90 91 46 01 	lds	r25, 0x0146
     cc4:	a0 91 47 01 	lds	r26, 0x0147
     cc8:	b0 91 48 01 	lds	r27, 0x0148
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	a1 1d       	adc	r26, r1
     cd0:	b1 1d       	adc	r27, r1
     cd2:	80 93 45 01 	sts	0x0145, r24
     cd6:	90 93 46 01 	sts	0x0146, r25
     cda:	a0 93 47 01 	sts	0x0147, r26
     cde:	b0 93 48 01 	sts	0x0148, r27
	eeprom_update_dword(&count1,global_counts_m1);
     ce2:	40 91 45 01 	lds	r20, 0x0145
     ce6:	50 91 46 01 	lds	r21, 0x0146
     cea:	60 91 47 01 	lds	r22, 0x0147
     cee:	70 91 48 01 	lds	r23, 0x0148
     cf2:	88 e0       	ldi	r24, 0x08	; 8
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 32 0a 	call	0x1464	; 0x1464 <__eeupd_dword_m16>
	
	if (tag0==0x00)
     cfa:	80 91 bc 01 	lds	r24, 0x01BC
     cfe:	81 11       	cpse	r24, r1
     d00:	0e c0       	rjmp	.+28     	; 0xd1e <__vector_1+0x84>
	{
		time00=get_time();
     d02:	0e 94 c2 04 	call	0x984	; 0x984 <get_time>
     d06:	46 2f       	mov	r20, r22
     d08:	57 2f       	mov	r21, r23
     d0a:	68 2f       	mov	r22, r24
     d0c:	79 2f       	mov	r23, r25
     d0e:	40 93 80 01 	sts	0x0180, r20
     d12:	50 93 81 01 	sts	0x0181, r21
     d16:	60 93 82 01 	sts	0x0182, r22
     d1a:	70 93 83 01 	sts	0x0183, r23
		
	}

	if (tag0==0xff)
     d1e:	80 91 bc 01 	lds	r24, 0x01BC
     d22:	8f 3f       	cpi	r24, 0xFF	; 255
     d24:	09 f0       	breq	.+2      	; 0xd28 <__vector_1+0x8e>
     d26:	40 c0       	rjmp	.+128    	; 0xda8 <__vector_1+0x10e>
	{
		time01=get_time();
     d28:	0e 94 c2 04 	call	0x984	; 0x984 <get_time>
     d2c:	46 2f       	mov	r20, r22
     d2e:	57 2f       	mov	r21, r23
     d30:	68 2f       	mov	r22, r24
     d32:	79 2f       	mov	r23, r25
     d34:	40 93 5d 01 	sts	0x015D, r20
     d38:	50 93 5e 01 	sts	0x015E, r21
     d3c:	60 93 5f 01 	sts	0x015F, r22
     d40:	70 93 60 01 	sts	0x0160, r23
		timecalc0=time01-time00;
     d44:	40 91 5d 01 	lds	r20, 0x015D
     d48:	50 91 5e 01 	lds	r21, 0x015E
     d4c:	60 91 5f 01 	lds	r22, 0x015F
     d50:	70 91 60 01 	lds	r23, 0x0160
     d54:	80 91 80 01 	lds	r24, 0x0180
     d58:	90 91 81 01 	lds	r25, 0x0181
     d5c:	a0 91 82 01 	lds	r26, 0x0182
     d60:	b0 91 83 01 	lds	r27, 0x0183
     d64:	48 1b       	sub	r20, r24
     d66:	59 0b       	sbc	r21, r25
     d68:	50 93 68 01 	sts	0x0168, r21
     d6c:	40 93 67 01 	sts	0x0167, r20
		load0=1125000/timecalc0;
     d70:	20 91 67 01 	lds	r18, 0x0167
     d74:	30 91 68 01 	lds	r19, 0x0168
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	68 e8       	ldi	r22, 0x88	; 136
     d7e:	7a e2       	ldi	r23, 0x2A	; 42
     d80:	81 e1       	ldi	r24, 0x11	; 17
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__divmodsi4>
     d88:	30 93 5c 01 	sts	0x015C, r19
     d8c:	20 93 5b 01 	sts	0x015B, r18
		ltoa(load0,a,10);
     d90:	60 91 5b 01 	lds	r22, 0x015B
     d94:	70 91 5c 01 	lds	r23, 0x015C
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	2a e0       	ldi	r18, 0x0A	; 10
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	48 ea       	ldi	r20, 0xA8	; 168
     da2:	51 e0       	ldi	r21, 0x01	; 1
     da4:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <ltoa>
	}
	tag0=~tag0;
     da8:	80 91 bc 01 	lds	r24, 0x01BC
     dac:	80 95       	com	r24
     dae:	80 93 bc 01 	sts	0x01BC, r24
}
     db2:	ff 91       	pop	r31
     db4:	ef 91       	pop	r30
     db6:	bf 91       	pop	r27
     db8:	af 91       	pop	r26
     dba:	9f 91       	pop	r25
     dbc:	8f 91       	pop	r24
     dbe:	7f 91       	pop	r23
     dc0:	6f 91       	pop	r22
     dc2:	5f 91       	pop	r21
     dc4:	4f 91       	pop	r20
     dc6:	3f 91       	pop	r19
     dc8:	2f 91       	pop	r18
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	0f 90       	pop	r0
     dd0:	1f 90       	pop	r1
     dd2:	18 95       	reti

00000dd4 <main>:
unsigned long t1;
unsigned long t2;
unsigned long t3;

int main()
{	
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	6e 97       	sbiw	r28, 0x1e	; 30
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
	DDRC=0xFF;
     de8:	8f ef       	ldi	r24, 0xFF	; 255
     dea:	84 bb       	out	0x14, r24	; 20
	uint8_t txrxrole = 0; // 1 transmitter 0 receiver
	
	init_interrupt();
     dec:	0e 94 32 04 	call	0x864	; 0x864 <init_interrupt>
	lcd_init();
     df0:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_init>

	//init nrf24l01
	nrf24l01_init();
     df4:	0e 94 da 02 	call	0x5b4	; 0x5b4 <nrf24l01_init>

	//init interrupt
	sei();
     df8:	78 94       	sei

	txrxrole = ROLETX;         /////////////////////////////////////////////////
	
	//sending buffer addresses
	uint8_t addrtx0[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP0;
     dfa:	85 e0       	ldi	r24, 0x05	; 5
     dfc:	e3 e8       	ldi	r30, 0x83	; 131
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	de 01       	movw	r26, r28
     e02:	11 96       	adiw	r26, 0x01	; 1
     e04:	01 90       	ld	r0, Z+
     e06:	0d 92       	st	X+, r0
     e08:	8a 95       	dec	r24
     e0a:	e1 f7       	brne	.-8      	; 0xe04 <main+0x30>
	uint8_t addrtx1[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP1;
     e0c:	85 e0       	ldi	r24, 0x05	; 5
     e0e:	e8 e8       	ldi	r30, 0x88	; 136
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	de 01       	movw	r26, r28
     e14:	16 96       	adiw	r26, 0x06	; 6
     e16:	01 90       	ld	r0, Z+
     e18:	0d 92       	st	X+, r0
     e1a:	8a 95       	dec	r24
     e1c:	e1 f7       	brne	.-8      	; 0xe16 <main+0x42>
	uint8_t addrtx2[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP2;
     e1e:	85 e0       	ldi	r24, 0x05	; 5
     e20:	ed e8       	ldi	r30, 0x8D	; 141
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	de 01       	movw	r26, r28
     e26:	1b 96       	adiw	r26, 0x0b	; 11
     e28:	01 90       	ld	r0, Z+
     e2a:	0d 92       	st	X+, r0
     e2c:	8a 95       	dec	r24
     e2e:	e1 f7       	brne	.-8      	; 0xe28 <main+0x54>
	uint8_t addrtx3[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP3;
     e30:	85 e0       	ldi	r24, 0x05	; 5
     e32:	e2 e9       	ldi	r30, 0x92	; 146
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	de 01       	movw	r26, r28
     e38:	50 96       	adiw	r26, 0x10	; 16
     e3a:	01 90       	ld	r0, Z+
     e3c:	0d 92       	st	X+, r0
     e3e:	8a 95       	dec	r24
     e40:	e1 f7       	brne	.-8      	; 0xe3a <main+0x66>
	uint8_t addrtx4[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP4;
     e42:	85 e0       	ldi	r24, 0x05	; 5
     e44:	e7 e9       	ldi	r30, 0x97	; 151
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	de 01       	movw	r26, r28
     e4a:	55 96       	adiw	r26, 0x15	; 21
     e4c:	01 90       	ld	r0, Z+
     e4e:	0d 92       	st	X+, r0
     e50:	8a 95       	dec	r24
     e52:	e1 f7       	brne	.-8      	; 0xe4c <main+0x78>
	uint8_t addrtx5[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP5;
     e54:	85 e0       	ldi	r24, 0x05	; 5
     e56:	ec e9       	ldi	r30, 0x9C	; 156
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	de 01       	movw	r26, r28
     e5c:	5a 96       	adiw	r26, 0x1a	; 26
     e5e:	01 90       	ld	r0, Z+
     e60:	0d 92       	st	X+, r0
     e62:	8a 95       	dec	r24
     e64:	e1 f7       	brne	.-8      	; 0xe5e <main+0x8a>
	lcd_gotoxy1(0);
	lcd_string("Pipe 5");
	_delay_ms(1500);
	
	////////////////////////////////////////////////////////////////////////////////////
	if (tag0=0xff)
     e66:	33 24       	eor	r3, r3
     e68:	3a 94       	dec	r3
	uint8_t addrtx5[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP5;

		
	while(1)
	{
			cli();
     e6a:	f8 94       	cli
	float m11=(get_counts_m1()*pow(3200,-1));
     e6c:	0e 94 89 04 	call	0x912	; 0x912 <get_counts_m1>
     e70:	4b 01       	movw	r8, r22
     e72:	5c 01       	movw	r10, r24
	float m22=(get_counts_m2()*pow(3200,-1));
     e74:	0e 94 9c 04 	call	0x938	; 0x938 <get_counts_m2>
     e78:	6b 01       	movw	r12, r22
     e7a:	7c 01       	movw	r14, r24
	float m33=(get_counts_m3()*pow(3200,-1));
     e7c:	0e 94 af 04 	call	0x95e	; 0x95e <get_counts_m3>
     e80:	2b 01       	movw	r4, r22
     e82:	3c 01       	movw	r6, r24

		
	while(1)
	{
			cli();
	float m11=(get_counts_m1()*pow(3200,-1));
     e84:	c5 01       	movw	r24, r10
     e86:	b4 01       	movw	r22, r8
     e88:	0e 94 84 08 	call	0x1108	; 0x1108 <__floatsisf>
     e8c:	2a e0       	ldi	r18, 0x0A	; 10
     e8e:	37 ed       	ldi	r19, 0xD7	; 215
     e90:	43 ea       	ldi	r20, 0xA3	; 163
     e92:	59 e3       	ldi	r21, 0x39	; 57
     e94:	0e 94 bf 08 	call	0x117e	; 0x117e <__mulsf3>
	float m22=(get_counts_m2()*pow(3200,-1));
	float m33=(get_counts_m3()*pow(3200,-1));
			
	dtostrf(m11,8,3,m1);
     e98:	0d e9       	ldi	r16, 0x9D	; 157
     e9a:	11 e0       	ldi	r17, 0x01	; 1
     e9c:	23 e0       	ldi	r18, 0x03	; 3
     e9e:	48 e0       	ldi	r20, 0x08	; 8
     ea0:	0e 94 d7 09 	call	0x13ae	; 0x13ae <dtostrf>
		
	while(1)
	{
			cli();
	float m11=(get_counts_m1()*pow(3200,-1));
	float m22=(get_counts_m2()*pow(3200,-1));
     ea4:	c7 01       	movw	r24, r14
     ea6:	b6 01       	movw	r22, r12
     ea8:	0e 94 84 08 	call	0x1108	; 0x1108 <__floatsisf>
     eac:	2a e0       	ldi	r18, 0x0A	; 10
     eae:	37 ed       	ldi	r19, 0xD7	; 215
     eb0:	43 ea       	ldi	r20, 0xA3	; 163
     eb2:	59 e3       	ldi	r21, 0x39	; 57
     eb4:	0e 94 bf 08 	call	0x117e	; 0x117e <__mulsf3>
	float m33=(get_counts_m3()*pow(3200,-1));
			
	dtostrf(m11,8,3,m1);
	dtostrf(m22,8,3,m2);
     eb8:	09 e6       	ldi	r16, 0x69	; 105
     eba:	11 e0       	ldi	r17, 0x01	; 1
     ebc:	23 e0       	ldi	r18, 0x03	; 3
     ebe:	48 e0       	ldi	r20, 0x08	; 8
     ec0:	0e 94 d7 09 	call	0x13ae	; 0x13ae <dtostrf>
	while(1)
	{
			cli();
	float m11=(get_counts_m1()*pow(3200,-1));
	float m22=(get_counts_m2()*pow(3200,-1));
	float m33=(get_counts_m3()*pow(3200,-1));
     ec4:	c3 01       	movw	r24, r6
     ec6:	b2 01       	movw	r22, r4
     ec8:	0e 94 84 08 	call	0x1108	; 0x1108 <__floatsisf>
     ecc:	2a e0       	ldi	r18, 0x0A	; 10
     ece:	37 ed       	ldi	r19, 0xD7	; 215
     ed0:	43 ea       	ldi	r20, 0xA3	; 163
     ed2:	59 e3       	ldi	r21, 0x39	; 57
     ed4:	0e 94 bf 08 	call	0x117e	; 0x117e <__mulsf3>
			
	dtostrf(m11,8,3,m1);
	dtostrf(m22,8,3,m2);
	dtostrf(m33,8,3,m3);
     ed8:	0d eb       	ldi	r16, 0xBD	; 189
     eda:	11 e0       	ldi	r17, 0x01	; 1
     edc:	23 e0       	ldi	r18, 0x03	; 3
     ede:	48 e0       	ldi	r20, 0x08	; 8
     ee0:	0e 94 d7 09 	call	0x13ae	; 0x13ae <dtostrf>
	sei();
     ee4:	78 94       	sei
	////////////////////////////////////////////////////////////////////////////////////
	
	nrf24l01_settxaddr(addrtx0);
     ee6:	ce 01       	movw	r24, r28
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	0e 94 40 02 	call	0x480	; 0x480 <nrf24l01_settxaddr>
	writeret = nrf24l01_writestr(m1);    //meter 1 Reading
     eee:	8d e9       	ldi	r24, 0x9D	; 157
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	0e 94 99 03 	call	0x732	; 0x732 <nrf24l01_writestr>
     ef6:	80 93 a7 01 	sts	0x01A7, r24
	lcd_gotoxy1(0);
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_gotoxy1>
	lcd_string("Pipe 0");
     f00:	88 e1       	ldi	r24, 0x18	; 24
     f02:	91 e0       	ldi	r25, 0x01	; 1
     f04:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f08:	2f ef       	ldi	r18, 0xFF	; 255
     f0a:	8d e3       	ldi	r24, 0x3D	; 61
     f0c:	99 e4       	ldi	r25, 0x49	; 73
     f0e:	21 50       	subi	r18, 0x01	; 1
     f10:	80 40       	sbci	r24, 0x00	; 0
     f12:	90 40       	sbci	r25, 0x00	; 0
     f14:	e1 f7       	brne	.-8      	; 0xf0e <main+0x13a>
     f16:	00 c0       	rjmp	.+0      	; 0xf18 <main+0x144>
     f18:	00 00       	nop
	_delay_ms(1500);
	
	////////////////////////////////////////////////////////////////////////////////////
	
	nrf24l01_settxaddr(addrtx1);
     f1a:	ce 01       	movw	r24, r28
     f1c:	06 96       	adiw	r24, 0x06	; 6
     f1e:	0e 94 40 02 	call	0x480	; 0x480 <nrf24l01_settxaddr>
	writeret = nrf24l01_writestr(a);    //meter 1 Load
     f22:	88 ea       	ldi	r24, 0xA8	; 168
     f24:	91 e0       	ldi	r25, 0x01	; 1
     f26:	0e 94 99 03 	call	0x732	; 0x732 <nrf24l01_writestr>
     f2a:	80 93 a7 01 	sts	0x01A7, r24
	lcd_gotoxy1(0);
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_gotoxy1>
	lcd_string("Pipe 1");
     f34:	8f e1       	ldi	r24, 0x1F	; 31
     f36:	91 e0       	ldi	r25, 0x01	; 1
     f38:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_string>
     f3c:	2f ef       	ldi	r18, 0xFF	; 255
     f3e:	8d e3       	ldi	r24, 0x3D	; 61
     f40:	99 e4       	ldi	r25, 0x49	; 73
     f42:	21 50       	subi	r18, 0x01	; 1
     f44:	80 40       	sbci	r24, 0x00	; 0
     f46:	90 40       	sbci	r25, 0x00	; 0
     f48:	e1 f7       	brne	.-8      	; 0xf42 <main+0x16e>
     f4a:	00 c0       	rjmp	.+0      	; 0xf4c <main+0x178>
     f4c:	00 00       	nop
	_delay_ms(1500);

	////////////////////////////////////////////////////////////////////////////////////
	
	nrf24l01_settxaddr(addrtx2);
     f4e:	ce 01       	movw	r24, r28
     f50:	0b 96       	adiw	r24, 0x0b	; 11
     f52:	0e 94 40 02 	call	0x480	; 0x480 <nrf24l01_settxaddr>
	writeret = nrf24l01_writestr(m2);    //meter 2 Reading
     f56:	89 e6       	ldi	r24, 0x69	; 105
     f58:	91 e0       	ldi	r25, 0x01	; 1
     f5a:	0e 94 99 03 	call	0x732	; 0x732 <nrf24l01_writestr>
     f5e:	80 93 a7 01 	sts	0x01A7, r24
	lcd_gotoxy1(0);
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_gotoxy1>
	lcd_string("Pipe 2");
     f68:	86 e2       	ldi	r24, 0x26	; 38
     f6a:	91 e0       	ldi	r25, 0x01	; 1
     f6c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_string>
     f70:	2f ef       	ldi	r18, 0xFF	; 255
     f72:	8d e3       	ldi	r24, 0x3D	; 61
     f74:	99 e4       	ldi	r25, 0x49	; 73
     f76:	21 50       	subi	r18, 0x01	; 1
     f78:	80 40       	sbci	r24, 0x00	; 0
     f7a:	90 40       	sbci	r25, 0x00	; 0
     f7c:	e1 f7       	brne	.-8      	; 0xf76 <main+0x1a2>
     f7e:	00 c0       	rjmp	.+0      	; 0xf80 <main+0x1ac>
     f80:	00 00       	nop
	_delay_ms(1500);
	
	////////////////////////////////////////////////////////////////////////////////////
	
	nrf24l01_settxaddr(addrtx3);
     f82:	ce 01       	movw	r24, r28
     f84:	40 96       	adiw	r24, 0x10	; 16
     f86:	0e 94 40 02 	call	0x480	; 0x480 <nrf24l01_settxaddr>
	writeret = nrf24l01_writestr(b);    //meter 2 Load
     f8a:	8d e4       	ldi	r24, 0x4D	; 77
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	0e 94 99 03 	call	0x732	; 0x732 <nrf24l01_writestr>
     f92:	80 93 a7 01 	sts	0x01A7, r24
	lcd_gotoxy1(0);
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_gotoxy1>
	lcd_string("Pipe 3");
     f9c:	8d e2       	ldi	r24, 0x2D	; 45
     f9e:	91 e0       	ldi	r25, 0x01	; 1
     fa0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_string>
     fa4:	2f ef       	ldi	r18, 0xFF	; 255
     fa6:	8d e3       	ldi	r24, 0x3D	; 61
     fa8:	99 e4       	ldi	r25, 0x49	; 73
     faa:	21 50       	subi	r18, 0x01	; 1
     fac:	80 40       	sbci	r24, 0x00	; 0
     fae:	90 40       	sbci	r25, 0x00	; 0
     fb0:	e1 f7       	brne	.-8      	; 0xfaa <main+0x1d6>
     fb2:	00 c0       	rjmp	.+0      	; 0xfb4 <main+0x1e0>
     fb4:	00 00       	nop
	_delay_ms(1500);
	
	////////////////////////////////////////////////////////////////////////////////////
	
	nrf24l01_settxaddr(addrtx4);
     fb6:	ce 01       	movw	r24, r28
     fb8:	45 96       	adiw	r24, 0x15	; 21
     fba:	0e 94 40 02 	call	0x480	; 0x480 <nrf24l01_settxaddr>
	writeret = nrf24l01_writestr(m3);    //meter 3 Reading
     fbe:	c8 01       	movw	r24, r16
     fc0:	0e 94 99 03 	call	0x732	; 0x732 <nrf24l01_writestr>
     fc4:	80 93 a7 01 	sts	0x01A7, r24
	lcd_gotoxy1(0);
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_gotoxy1>
	lcd_string("Pipe 4");
     fce:	84 e3       	ldi	r24, 0x34	; 52
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_string>
     fd6:	2f ef       	ldi	r18, 0xFF	; 255
     fd8:	8d e3       	ldi	r24, 0x3D	; 61
     fda:	99 e4       	ldi	r25, 0x49	; 73
     fdc:	21 50       	subi	r18, 0x01	; 1
     fde:	80 40       	sbci	r24, 0x00	; 0
     fe0:	90 40       	sbci	r25, 0x00	; 0
     fe2:	e1 f7       	brne	.-8      	; 0xfdc <main+0x208>
     fe4:	00 c0       	rjmp	.+0      	; 0xfe6 <main+0x212>
     fe6:	00 00       	nop
	_delay_ms(1500);
	
	////////////////////////////////////////////////////////////////////////////////////
	
	nrf24l01_settxaddr(addrtx5);
     fe8:	ce 01       	movw	r24, r28
     fea:	4a 96       	adiw	r24, 0x1a	; 26
     fec:	0e 94 40 02 	call	0x480	; 0x480 <nrf24l01_settxaddr>
	writeret = nrf24l01_writestr(c);    //meter 3 Load
     ff0:	88 e8       	ldi	r24, 0x88	; 136
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	0e 94 99 03 	call	0x732	; 0x732 <nrf24l01_writestr>
     ff8:	80 93 a7 01 	sts	0x01A7, r24
	lcd_gotoxy1(0);
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_gotoxy1>
	lcd_string("Pipe 5");
    1002:	8b e3       	ldi	r24, 0x3B	; 59
    1004:	91 e0       	ldi	r25, 0x01	; 1
    1006:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_string>
    100a:	2f ef       	ldi	r18, 0xFF	; 255
    100c:	8d e3       	ldi	r24, 0x3D	; 61
    100e:	99 e4       	ldi	r25, 0x49	; 73
    1010:	21 50       	subi	r18, 0x01	; 1
    1012:	80 40       	sbci	r24, 0x00	; 0
    1014:	90 40       	sbci	r25, 0x00	; 0
    1016:	e1 f7       	brne	.-8      	; 0x1010 <main+0x23c>
    1018:	00 c0       	rjmp	.+0      	; 0x101a <main+0x246>
    101a:	00 00       	nop
	_delay_ms(1500);
	
	////////////////////////////////////////////////////////////////////////////////////
	if (tag0=0xff)
    101c:	30 92 bc 01 	sts	0x01BC, r3
	{
		t1=get_time();
    1020:	0e 94 c2 04 	call	0x984	; 0x984 <get_time>
    1024:	46 2f       	mov	r20, r22
    1026:	57 2f       	mov	r21, r23
    1028:	68 2f       	mov	r22, r24
    102a:	79 2f       	mov	r23, r25
    102c:	40 93 93 01 	sts	0x0193, r20
    1030:	50 93 94 01 	sts	0x0194, r21
    1034:	60 93 95 01 	sts	0x0195, r22
    1038:	70 93 96 01 	sts	0x0196, r23
		if (t1>time00)
    103c:	80 91 80 01 	lds	r24, 0x0180
    1040:	90 91 81 01 	lds	r25, 0x0181
    1044:	a0 91 82 01 	lds	r26, 0x0182
    1048:	b0 91 83 01 	lds	r27, 0x0183
    104c:	84 17       	cp	r24, r20
    104e:	95 07       	cpc	r25, r21
    1050:	a6 07       	cpc	r26, r22
    1052:	b7 07       	cpc	r27, r23
    1054:	48 f4       	brcc	.+18     	; 0x1068 <main+0x294>
		{
			ltoa(0,a,10);
    1056:	2a e0       	ldi	r18, 0x0A	; 10
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	48 ea       	ldi	r20, 0xA8	; 168
    105c:	51 e0       	ldi	r21, 0x01	; 1
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	cb 01       	movw	r24, r22
    1064:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <ltoa>
		}
	}
	if (tag1=0xff)
    1068:	30 92 79 01 	sts	0x0179, r3
	{
		t2=get_time();
    106c:	0e 94 c2 04 	call	0x984	; 0x984 <get_time>
    1070:	46 2f       	mov	r20, r22
    1072:	57 2f       	mov	r21, r23
    1074:	68 2f       	mov	r22, r24
    1076:	79 2f       	mov	r23, r25
    1078:	40 93 73 01 	sts	0x0173, r20
    107c:	50 93 74 01 	sts	0x0174, r21
    1080:	60 93 75 01 	sts	0x0175, r22
    1084:	70 93 76 01 	sts	0x0176, r23
		if (t2>time10)
    1088:	80 91 57 01 	lds	r24, 0x0157
    108c:	90 91 58 01 	lds	r25, 0x0158
    1090:	a0 91 59 01 	lds	r26, 0x0159
    1094:	b0 91 5a 01 	lds	r27, 0x015A
    1098:	84 17       	cp	r24, r20
    109a:	95 07       	cpc	r25, r21
    109c:	a6 07       	cpc	r26, r22
    109e:	b7 07       	cpc	r27, r23
    10a0:	48 f4       	brcc	.+18     	; 0x10b4 <main+0x2e0>
		{
			ltoa(0,b,10);
    10a2:	2a e0       	ldi	r18, 0x0A	; 10
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	4d e4       	ldi	r20, 0x4D	; 77
    10a8:	51 e0       	ldi	r21, 0x01	; 1
    10aa:	60 e0       	ldi	r22, 0x00	; 0
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	cb 01       	movw	r24, r22
    10b0:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <ltoa>
		}
	}
	if (tag2=0xff)
    10b4:	30 92 92 01 	sts	0x0192, r3
	{
		t3=get_time();
    10b8:	0e 94 c2 04 	call	0x984	; 0x984 <get_time>
    10bc:	46 2f       	mov	r20, r22
    10be:	57 2f       	mov	r21, r23
    10c0:	68 2f       	mov	r22, r24
    10c2:	79 2f       	mov	r23, r25
    10c4:	40 93 49 01 	sts	0x0149, r20
    10c8:	50 93 4a 01 	sts	0x014A, r21
    10cc:	60 93 4b 01 	sts	0x014B, r22
    10d0:	70 93 4c 01 	sts	0x014C, r23
		if (t3>time20)
    10d4:	80 91 b2 01 	lds	r24, 0x01B2
    10d8:	90 91 b3 01 	lds	r25, 0x01B3
    10dc:	a0 91 b4 01 	lds	r26, 0x01B4
    10e0:	b0 91 b5 01 	lds	r27, 0x01B5
    10e4:	84 17       	cp	r24, r20
    10e6:	95 07       	cpc	r25, r21
    10e8:	a6 07       	cpc	r26, r22
    10ea:	b7 07       	cpc	r27, r23
    10ec:	08 f0       	brcs	.+2      	; 0x10f0 <main+0x31c>
    10ee:	bd ce       	rjmp	.-646    	; 0xe6a <main+0x96>
		{
			ltoa(0,c,10);
    10f0:	2a e0       	ldi	r18, 0x0A	; 10
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	48 e8       	ldi	r20, 0x88	; 136
    10f6:	51 e0       	ldi	r21, 0x01	; 1
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	cb 01       	movw	r24, r22
    10fe:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <ltoa>
    1102:	b3 ce       	rjmp	.-666    	; 0xe6a <main+0x96>

00001104 <__floatunsisf>:
    1104:	e8 94       	clt
    1106:	09 c0       	rjmp	.+18     	; 0x111a <__floatsisf+0x12>

00001108 <__floatsisf>:
    1108:	97 fb       	bst	r25, 7
    110a:	3e f4       	brtc	.+14     	; 0x111a <__floatsisf+0x12>
    110c:	90 95       	com	r25
    110e:	80 95       	com	r24
    1110:	70 95       	com	r23
    1112:	61 95       	neg	r22
    1114:	7f 4f       	sbci	r23, 0xFF	; 255
    1116:	8f 4f       	sbci	r24, 0xFF	; 255
    1118:	9f 4f       	sbci	r25, 0xFF	; 255
    111a:	99 23       	and	r25, r25
    111c:	a9 f0       	breq	.+42     	; 0x1148 <__floatsisf+0x40>
    111e:	f9 2f       	mov	r31, r25
    1120:	96 e9       	ldi	r25, 0x96	; 150
    1122:	bb 27       	eor	r27, r27
    1124:	93 95       	inc	r25
    1126:	f6 95       	lsr	r31
    1128:	87 95       	ror	r24
    112a:	77 95       	ror	r23
    112c:	67 95       	ror	r22
    112e:	b7 95       	ror	r27
    1130:	f1 11       	cpse	r31, r1
    1132:	f8 cf       	rjmp	.-16     	; 0x1124 <__floatsisf+0x1c>
    1134:	fa f4       	brpl	.+62     	; 0x1174 <__floatsisf+0x6c>
    1136:	bb 0f       	add	r27, r27
    1138:	11 f4       	brne	.+4      	; 0x113e <__floatsisf+0x36>
    113a:	60 ff       	sbrs	r22, 0
    113c:	1b c0       	rjmp	.+54     	; 0x1174 <__floatsisf+0x6c>
    113e:	6f 5f       	subi	r22, 0xFF	; 255
    1140:	7f 4f       	sbci	r23, 0xFF	; 255
    1142:	8f 4f       	sbci	r24, 0xFF	; 255
    1144:	9f 4f       	sbci	r25, 0xFF	; 255
    1146:	16 c0       	rjmp	.+44     	; 0x1174 <__floatsisf+0x6c>
    1148:	88 23       	and	r24, r24
    114a:	11 f0       	breq	.+4      	; 0x1150 <__floatsisf+0x48>
    114c:	96 e9       	ldi	r25, 0x96	; 150
    114e:	11 c0       	rjmp	.+34     	; 0x1172 <__floatsisf+0x6a>
    1150:	77 23       	and	r23, r23
    1152:	21 f0       	breq	.+8      	; 0x115c <__floatsisf+0x54>
    1154:	9e e8       	ldi	r25, 0x8E	; 142
    1156:	87 2f       	mov	r24, r23
    1158:	76 2f       	mov	r23, r22
    115a:	05 c0       	rjmp	.+10     	; 0x1166 <__floatsisf+0x5e>
    115c:	66 23       	and	r22, r22
    115e:	71 f0       	breq	.+28     	; 0x117c <__floatsisf+0x74>
    1160:	96 e8       	ldi	r25, 0x86	; 134
    1162:	86 2f       	mov	r24, r22
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	2a f0       	brmi	.+10     	; 0x1174 <__floatsisf+0x6c>
    116a:	9a 95       	dec	r25
    116c:	66 0f       	add	r22, r22
    116e:	77 1f       	adc	r23, r23
    1170:	88 1f       	adc	r24, r24
    1172:	da f7       	brpl	.-10     	; 0x116a <__floatsisf+0x62>
    1174:	88 0f       	add	r24, r24
    1176:	96 95       	lsr	r25
    1178:	87 95       	ror	r24
    117a:	97 f9       	bld	r25, 7
    117c:	08 95       	ret

0000117e <__mulsf3>:
    117e:	0b d0       	rcall	.+22     	; 0x1196 <__mulsf3x>
    1180:	78 c0       	rjmp	.+240    	; 0x1272 <__fp_round>
    1182:	69 d0       	rcall	.+210    	; 0x1256 <__fp_pscA>
    1184:	28 f0       	brcs	.+10     	; 0x1190 <__mulsf3+0x12>
    1186:	6e d0       	rcall	.+220    	; 0x1264 <__fp_pscB>
    1188:	18 f0       	brcs	.+6      	; 0x1190 <__mulsf3+0x12>
    118a:	95 23       	and	r25, r21
    118c:	09 f0       	breq	.+2      	; 0x1190 <__mulsf3+0x12>
    118e:	5a c0       	rjmp	.+180    	; 0x1244 <__fp_inf>
    1190:	5f c0       	rjmp	.+190    	; 0x1250 <__fp_nan>
    1192:	11 24       	eor	r1, r1
    1194:	a2 c0       	rjmp	.+324    	; 0x12da <__fp_szero>

00001196 <__mulsf3x>:
    1196:	7e d0       	rcall	.+252    	; 0x1294 <__fp_split3>
    1198:	a0 f3       	brcs	.-24     	; 0x1182 <__mulsf3+0x4>

0000119a <__mulsf3_pse>:
    119a:	95 9f       	mul	r25, r21
    119c:	d1 f3       	breq	.-12     	; 0x1192 <__mulsf3+0x14>
    119e:	95 0f       	add	r25, r21
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	55 1f       	adc	r21, r21
    11a4:	62 9f       	mul	r22, r18
    11a6:	f0 01       	movw	r30, r0
    11a8:	72 9f       	mul	r23, r18
    11aa:	bb 27       	eor	r27, r27
    11ac:	f0 0d       	add	r31, r0
    11ae:	b1 1d       	adc	r27, r1
    11b0:	63 9f       	mul	r22, r19
    11b2:	aa 27       	eor	r26, r26
    11b4:	f0 0d       	add	r31, r0
    11b6:	b1 1d       	adc	r27, r1
    11b8:	aa 1f       	adc	r26, r26
    11ba:	64 9f       	mul	r22, r20
    11bc:	66 27       	eor	r22, r22
    11be:	b0 0d       	add	r27, r0
    11c0:	a1 1d       	adc	r26, r1
    11c2:	66 1f       	adc	r22, r22
    11c4:	82 9f       	mul	r24, r18
    11c6:	22 27       	eor	r18, r18
    11c8:	b0 0d       	add	r27, r0
    11ca:	a1 1d       	adc	r26, r1
    11cc:	62 1f       	adc	r22, r18
    11ce:	73 9f       	mul	r23, r19
    11d0:	b0 0d       	add	r27, r0
    11d2:	a1 1d       	adc	r26, r1
    11d4:	62 1f       	adc	r22, r18
    11d6:	83 9f       	mul	r24, r19
    11d8:	a0 0d       	add	r26, r0
    11da:	61 1d       	adc	r22, r1
    11dc:	22 1f       	adc	r18, r18
    11de:	74 9f       	mul	r23, r20
    11e0:	33 27       	eor	r19, r19
    11e2:	a0 0d       	add	r26, r0
    11e4:	61 1d       	adc	r22, r1
    11e6:	23 1f       	adc	r18, r19
    11e8:	84 9f       	mul	r24, r20
    11ea:	60 0d       	add	r22, r0
    11ec:	21 1d       	adc	r18, r1
    11ee:	82 2f       	mov	r24, r18
    11f0:	76 2f       	mov	r23, r22
    11f2:	6a 2f       	mov	r22, r26
    11f4:	11 24       	eor	r1, r1
    11f6:	9f 57       	subi	r25, 0x7F	; 127
    11f8:	50 40       	sbci	r21, 0x00	; 0
    11fa:	8a f0       	brmi	.+34     	; 0x121e <__mulsf3_pse+0x84>
    11fc:	e1 f0       	breq	.+56     	; 0x1236 <__mulsf3_pse+0x9c>
    11fe:	88 23       	and	r24, r24
    1200:	4a f0       	brmi	.+18     	; 0x1214 <__mulsf3_pse+0x7a>
    1202:	ee 0f       	add	r30, r30
    1204:	ff 1f       	adc	r31, r31
    1206:	bb 1f       	adc	r27, r27
    1208:	66 1f       	adc	r22, r22
    120a:	77 1f       	adc	r23, r23
    120c:	88 1f       	adc	r24, r24
    120e:	91 50       	subi	r25, 0x01	; 1
    1210:	50 40       	sbci	r21, 0x00	; 0
    1212:	a9 f7       	brne	.-22     	; 0x11fe <__mulsf3_pse+0x64>
    1214:	9e 3f       	cpi	r25, 0xFE	; 254
    1216:	51 05       	cpc	r21, r1
    1218:	70 f0       	brcs	.+28     	; 0x1236 <__mulsf3_pse+0x9c>
    121a:	14 c0       	rjmp	.+40     	; 0x1244 <__fp_inf>
    121c:	5e c0       	rjmp	.+188    	; 0x12da <__fp_szero>
    121e:	5f 3f       	cpi	r21, 0xFF	; 255
    1220:	ec f3       	brlt	.-6      	; 0x121c <__mulsf3_pse+0x82>
    1222:	98 3e       	cpi	r25, 0xE8	; 232
    1224:	dc f3       	brlt	.-10     	; 0x121c <__mulsf3_pse+0x82>
    1226:	86 95       	lsr	r24
    1228:	77 95       	ror	r23
    122a:	67 95       	ror	r22
    122c:	b7 95       	ror	r27
    122e:	f7 95       	ror	r31
    1230:	e7 95       	ror	r30
    1232:	9f 5f       	subi	r25, 0xFF	; 255
    1234:	c1 f7       	brne	.-16     	; 0x1226 <__mulsf3_pse+0x8c>
    1236:	fe 2b       	or	r31, r30
    1238:	88 0f       	add	r24, r24
    123a:	91 1d       	adc	r25, r1
    123c:	96 95       	lsr	r25
    123e:	87 95       	ror	r24
    1240:	97 f9       	bld	r25, 7
    1242:	08 95       	ret

00001244 <__fp_inf>:
    1244:	97 f9       	bld	r25, 7
    1246:	9f 67       	ori	r25, 0x7F	; 127
    1248:	80 e8       	ldi	r24, 0x80	; 128
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	08 95       	ret

00001250 <__fp_nan>:
    1250:	9f ef       	ldi	r25, 0xFF	; 255
    1252:	80 ec       	ldi	r24, 0xC0	; 192
    1254:	08 95       	ret

00001256 <__fp_pscA>:
    1256:	00 24       	eor	r0, r0
    1258:	0a 94       	dec	r0
    125a:	16 16       	cp	r1, r22
    125c:	17 06       	cpc	r1, r23
    125e:	18 06       	cpc	r1, r24
    1260:	09 06       	cpc	r0, r25
    1262:	08 95       	ret

00001264 <__fp_pscB>:
    1264:	00 24       	eor	r0, r0
    1266:	0a 94       	dec	r0
    1268:	12 16       	cp	r1, r18
    126a:	13 06       	cpc	r1, r19
    126c:	14 06       	cpc	r1, r20
    126e:	05 06       	cpc	r0, r21
    1270:	08 95       	ret

00001272 <__fp_round>:
    1272:	09 2e       	mov	r0, r25
    1274:	03 94       	inc	r0
    1276:	00 0c       	add	r0, r0
    1278:	11 f4       	brne	.+4      	; 0x127e <__fp_round+0xc>
    127a:	88 23       	and	r24, r24
    127c:	52 f0       	brmi	.+20     	; 0x1292 <__fp_round+0x20>
    127e:	bb 0f       	add	r27, r27
    1280:	40 f4       	brcc	.+16     	; 0x1292 <__fp_round+0x20>
    1282:	bf 2b       	or	r27, r31
    1284:	11 f4       	brne	.+4      	; 0x128a <__fp_round+0x18>
    1286:	60 ff       	sbrs	r22, 0
    1288:	04 c0       	rjmp	.+8      	; 0x1292 <__fp_round+0x20>
    128a:	6f 5f       	subi	r22, 0xFF	; 255
    128c:	7f 4f       	sbci	r23, 0xFF	; 255
    128e:	8f 4f       	sbci	r24, 0xFF	; 255
    1290:	9f 4f       	sbci	r25, 0xFF	; 255
    1292:	08 95       	ret

00001294 <__fp_split3>:
    1294:	57 fd       	sbrc	r21, 7
    1296:	90 58       	subi	r25, 0x80	; 128
    1298:	44 0f       	add	r20, r20
    129a:	55 1f       	adc	r21, r21
    129c:	59 f0       	breq	.+22     	; 0x12b4 <__fp_splitA+0x10>
    129e:	5f 3f       	cpi	r21, 0xFF	; 255
    12a0:	71 f0       	breq	.+28     	; 0x12be <__fp_splitA+0x1a>
    12a2:	47 95       	ror	r20

000012a4 <__fp_splitA>:
    12a4:	88 0f       	add	r24, r24
    12a6:	97 fb       	bst	r25, 7
    12a8:	99 1f       	adc	r25, r25
    12aa:	61 f0       	breq	.+24     	; 0x12c4 <__fp_splitA+0x20>
    12ac:	9f 3f       	cpi	r25, 0xFF	; 255
    12ae:	79 f0       	breq	.+30     	; 0x12ce <__fp_splitA+0x2a>
    12b0:	87 95       	ror	r24
    12b2:	08 95       	ret
    12b4:	12 16       	cp	r1, r18
    12b6:	13 06       	cpc	r1, r19
    12b8:	14 06       	cpc	r1, r20
    12ba:	55 1f       	adc	r21, r21
    12bc:	f2 cf       	rjmp	.-28     	; 0x12a2 <__fp_split3+0xe>
    12be:	46 95       	lsr	r20
    12c0:	f1 df       	rcall	.-30     	; 0x12a4 <__fp_splitA>
    12c2:	08 c0       	rjmp	.+16     	; 0x12d4 <__fp_splitA+0x30>
    12c4:	16 16       	cp	r1, r22
    12c6:	17 06       	cpc	r1, r23
    12c8:	18 06       	cpc	r1, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	f1 cf       	rjmp	.-30     	; 0x12b0 <__fp_splitA+0xc>
    12ce:	86 95       	lsr	r24
    12d0:	71 05       	cpc	r23, r1
    12d2:	61 05       	cpc	r22, r1
    12d4:	08 94       	sec
    12d6:	08 95       	ret

000012d8 <__fp_zero>:
    12d8:	e8 94       	clt

000012da <__fp_szero>:
    12da:	bb 27       	eor	r27, r27
    12dc:	66 27       	eor	r22, r22
    12de:	77 27       	eor	r23, r23
    12e0:	cb 01       	movw	r24, r22
    12e2:	97 f9       	bld	r25, 7
    12e4:	08 95       	ret

000012e6 <__divmodsi4>:
    12e6:	05 2e       	mov	r0, r21
    12e8:	97 fb       	bst	r25, 7
    12ea:	16 f4       	brtc	.+4      	; 0x12f0 <__divmodsi4+0xa>
    12ec:	00 94       	com	r0
    12ee:	07 d0       	rcall	.+14     	; 0x12fe <__divmodsi4_neg1>
    12f0:	57 fd       	sbrc	r21, 7
    12f2:	0d d0       	rcall	.+26     	; 0x130e <__divmodsi4_neg2>
    12f4:	0e 94 9e 09 	call	0x133c	; 0x133c <__udivmodsi4>
    12f8:	07 fc       	sbrc	r0, 7
    12fa:	09 d0       	rcall	.+18     	; 0x130e <__divmodsi4_neg2>
    12fc:	7e f4       	brtc	.+30     	; 0x131c <__divmodsi4_exit>

000012fe <__divmodsi4_neg1>:
    12fe:	90 95       	com	r25
    1300:	80 95       	com	r24
    1302:	70 95       	com	r23
    1304:	61 95       	neg	r22
    1306:	7f 4f       	sbci	r23, 0xFF	; 255
    1308:	8f 4f       	sbci	r24, 0xFF	; 255
    130a:	9f 4f       	sbci	r25, 0xFF	; 255
    130c:	08 95       	ret

0000130e <__divmodsi4_neg2>:
    130e:	50 95       	com	r21
    1310:	40 95       	com	r20
    1312:	30 95       	com	r19
    1314:	21 95       	neg	r18
    1316:	3f 4f       	sbci	r19, 0xFF	; 255
    1318:	4f 4f       	sbci	r20, 0xFF	; 255
    131a:	5f 4f       	sbci	r21, 0xFF	; 255

0000131c <__divmodsi4_exit>:
    131c:	08 95       	ret

0000131e <__usmulhisi3>:
    131e:	0e 94 c0 09 	call	0x1380	; 0x1380 <__umulhisi3>

00001322 <__usmulhisi3_tail>:
    1322:	b7 ff       	sbrs	r27, 7
    1324:	08 95       	ret
    1326:	82 1b       	sub	r24, r18
    1328:	93 0b       	sbc	r25, r19
    132a:	08 95       	ret

0000132c <__mulshisi3>:
    132c:	b7 ff       	sbrs	r27, 7
    132e:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__muluhisi3>

00001332 <__mulohisi3>:
    1332:	0e 94 cc 09 	call	0x1398	; 0x1398 <__muluhisi3>
    1336:	82 1b       	sub	r24, r18
    1338:	93 0b       	sbc	r25, r19
    133a:	08 95       	ret

0000133c <__udivmodsi4>:
    133c:	a1 e2       	ldi	r26, 0x21	; 33
    133e:	1a 2e       	mov	r1, r26
    1340:	aa 1b       	sub	r26, r26
    1342:	bb 1b       	sub	r27, r27
    1344:	fd 01       	movw	r30, r26
    1346:	0d c0       	rjmp	.+26     	; 0x1362 <__udivmodsi4_ep>

00001348 <__udivmodsi4_loop>:
    1348:	aa 1f       	adc	r26, r26
    134a:	bb 1f       	adc	r27, r27
    134c:	ee 1f       	adc	r30, r30
    134e:	ff 1f       	adc	r31, r31
    1350:	a2 17       	cp	r26, r18
    1352:	b3 07       	cpc	r27, r19
    1354:	e4 07       	cpc	r30, r20
    1356:	f5 07       	cpc	r31, r21
    1358:	20 f0       	brcs	.+8      	; 0x1362 <__udivmodsi4_ep>
    135a:	a2 1b       	sub	r26, r18
    135c:	b3 0b       	sbc	r27, r19
    135e:	e4 0b       	sbc	r30, r20
    1360:	f5 0b       	sbc	r31, r21

00001362 <__udivmodsi4_ep>:
    1362:	66 1f       	adc	r22, r22
    1364:	77 1f       	adc	r23, r23
    1366:	88 1f       	adc	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	1a 94       	dec	r1
    136c:	69 f7       	brne	.-38     	; 0x1348 <__udivmodsi4_loop>
    136e:	60 95       	com	r22
    1370:	70 95       	com	r23
    1372:	80 95       	com	r24
    1374:	90 95       	com	r25
    1376:	9b 01       	movw	r18, r22
    1378:	ac 01       	movw	r20, r24
    137a:	bd 01       	movw	r22, r26
    137c:	cf 01       	movw	r24, r30
    137e:	08 95       	ret

00001380 <__umulhisi3>:
    1380:	a2 9f       	mul	r26, r18
    1382:	b0 01       	movw	r22, r0
    1384:	b3 9f       	mul	r27, r19
    1386:	c0 01       	movw	r24, r0
    1388:	a3 9f       	mul	r26, r19
    138a:	01 d0       	rcall	.+2      	; 0x138e <__umulhisi3+0xe>
    138c:	b2 9f       	mul	r27, r18
    138e:	70 0d       	add	r23, r0
    1390:	81 1d       	adc	r24, r1
    1392:	11 24       	eor	r1, r1
    1394:	91 1d       	adc	r25, r1
    1396:	08 95       	ret

00001398 <__muluhisi3>:
    1398:	0e 94 c0 09 	call	0x1380	; 0x1380 <__umulhisi3>
    139c:	a5 9f       	mul	r26, r21
    139e:	90 0d       	add	r25, r0
    13a0:	b4 9f       	mul	r27, r20
    13a2:	90 0d       	add	r25, r0
    13a4:	a4 9f       	mul	r26, r20
    13a6:	80 0d       	add	r24, r0
    13a8:	91 1d       	adc	r25, r1
    13aa:	11 24       	eor	r1, r1
    13ac:	08 95       	ret

000013ae <dtostrf>:
    13ae:	ef 92       	push	r14
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	c0 2f       	mov	r28, r16
    13b8:	47 ff       	sbrs	r20, 7
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <dtostrf+0x12>
    13bc:	34 e1       	ldi	r19, 0x14	; 20
    13be:	01 c0       	rjmp	.+2      	; 0x13c2 <dtostrf+0x14>
    13c0:	34 e0       	ldi	r19, 0x04	; 4
    13c2:	e4 2f       	mov	r30, r20
    13c4:	ff 27       	eor	r31, r31
    13c6:	e7 fd       	sbrc	r30, 7
    13c8:	f0 95       	com	r31
    13ca:	f7 ff       	sbrs	r31, 7
    13cc:	03 c0       	rjmp	.+6      	; 0x13d4 <dtostrf+0x26>
    13ce:	f1 95       	neg	r31
    13d0:	e1 95       	neg	r30
    13d2:	f1 09       	sbc	r31, r1
    13d4:	e3 2e       	mov	r14, r19
    13d6:	02 2f       	mov	r16, r18
    13d8:	2e 2f       	mov	r18, r30
    13da:	4c 2f       	mov	r20, r28
    13dc:	51 2f       	mov	r21, r17
    13de:	0e 94 3e 0a 	call	0x147c	; 0x147c <dtoa_prf>
    13e2:	8c 2f       	mov	r24, r28
    13e4:	91 2f       	mov	r25, r17
    13e6:	cf 91       	pop	r28
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	ef 90       	pop	r14
    13ee:	08 95       	ret

000013f0 <ltoa>:
    13f0:	fa 01       	movw	r30, r20
    13f2:	cf 93       	push	r28
    13f4:	ff 93       	push	r31
    13f6:	ef 93       	push	r30
    13f8:	22 30       	cpi	r18, 0x02	; 2
    13fa:	44 f1       	brlt	.+80     	; 0x144c <ltoa+0x5c>
    13fc:	25 32       	cpi	r18, 0x25	; 37
    13fe:	34 f5       	brge	.+76     	; 0x144c <ltoa+0x5c>
    1400:	c2 2f       	mov	r28, r18
    1402:	e8 94       	clt
    1404:	ca 30       	cpi	r28, 0x0A	; 10
    1406:	49 f4       	brne	.+18     	; 0x141a <ltoa+0x2a>
    1408:	97 fb       	bst	r25, 7
    140a:	3e f4       	brtc	.+14     	; 0x141a <ltoa+0x2a>
    140c:	90 95       	com	r25
    140e:	80 95       	com	r24
    1410:	70 95       	com	r23
    1412:	61 95       	neg	r22
    1414:	7f 4f       	sbci	r23, 0xFF	; 255
    1416:	8f 4f       	sbci	r24, 0xFF	; 255
    1418:	9f 4f       	sbci	r25, 0xFF	; 255
    141a:	2c 2f       	mov	r18, r28
    141c:	33 27       	eor	r19, r19
    141e:	44 27       	eor	r20, r20
    1420:	55 27       	eor	r21, r21
    1422:	ff 93       	push	r31
    1424:	ef 93       	push	r30
    1426:	0e 94 9e 09 	call	0x133c	; 0x133c <__udivmodsi4>
    142a:	ef 91       	pop	r30
    142c:	ff 91       	pop	r31
    142e:	60 5d       	subi	r22, 0xD0	; 208
    1430:	6a 33       	cpi	r22, 0x3A	; 58
    1432:	0c f0       	brlt	.+2      	; 0x1436 <ltoa+0x46>
    1434:	69 5d       	subi	r22, 0xD9	; 217
    1436:	61 93       	st	Z+, r22
    1438:	b9 01       	movw	r22, r18
    143a:	ca 01       	movw	r24, r20
    143c:	60 50       	subi	r22, 0x00	; 0
    143e:	70 40       	sbci	r23, 0x00	; 0
    1440:	80 40       	sbci	r24, 0x00	; 0
    1442:	90 40       	sbci	r25, 0x00	; 0
    1444:	51 f7       	brne	.-44     	; 0x141a <ltoa+0x2a>
    1446:	16 f4       	brtc	.+4      	; 0x144c <ltoa+0x5c>
    1448:	cd e2       	ldi	r28, 0x2D	; 45
    144a:	c1 93       	st	Z+, r28
    144c:	10 82       	st	Z, r1
    144e:	8f 91       	pop	r24
    1450:	9f 91       	pop	r25
    1452:	cf 91       	pop	r28
    1454:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <strrev>

00001458 <__eerd_dword_m16>:
    1458:	a6 e1       	ldi	r26, 0x16	; 22
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	44 e0       	ldi	r20, 0x04	; 4
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__eerd_blraw_m16>

00001464 <__eeupd_dword_m16>:
    1464:	03 96       	adiw	r24, 0x03	; 3
    1466:	27 2f       	mov	r18, r23
    1468:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__eeupd_r18_m16>
    146c:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__eeupd_byte_m16>
    1470:	25 2f       	mov	r18, r21
    1472:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__eeupd_r18_m16>
    1476:	24 2f       	mov	r18, r20
    1478:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <__eeupd_r18_m16>

0000147c <dtoa_prf>:
    147c:	6f 92       	push	r6
    147e:	7f 92       	push	r7
    1480:	9f 92       	push	r9
    1482:	af 92       	push	r10
    1484:	bf 92       	push	r11
    1486:	cf 92       	push	r12
    1488:	df 92       	push	r13
    148a:	ef 92       	push	r14
    148c:	ff 92       	push	r15
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	29 97       	sbiw	r28, 0x09	; 9
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	6a 01       	movw	r12, r20
    14a8:	b2 2e       	mov	r11, r18
    14aa:	10 2f       	mov	r17, r16
    14ac:	0c 33       	cpi	r16, 0x3C	; 60
    14ae:	18 f4       	brcc	.+6      	; 0x14b6 <dtoa_prf+0x3a>
    14b0:	f0 2e       	mov	r15, r16
    14b2:	f3 94       	inc	r15
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <dtoa_prf+0x3e>
    14b6:	5c e3       	ldi	r21, 0x3C	; 60
    14b8:	f5 2e       	mov	r15, r21
    14ba:	0f 2d       	mov	r16, r15
    14bc:	27 e0       	ldi	r18, 0x07	; 7
    14be:	ae 01       	movw	r20, r28
    14c0:	4f 5f       	subi	r20, 0xFF	; 255
    14c2:	5f 4f       	sbci	r21, 0xFF	; 255
    14c4:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__ftoa_engine>
    14c8:	79 81       	ldd	r23, Y+1	; 0x01
    14ca:	27 2f       	mov	r18, r23
    14cc:	29 70       	andi	r18, 0x09	; 9
    14ce:	21 30       	cpi	r18, 0x01	; 1
    14d0:	31 f0       	breq	.+12     	; 0x14de <dtoa_prf+0x62>
    14d2:	e1 fc       	sbrc	r14, 1
    14d4:	06 c0       	rjmp	.+12     	; 0x14e2 <dtoa_prf+0x66>
    14d6:	e0 fe       	sbrs	r14, 0
    14d8:	06 c0       	rjmp	.+12     	; 0x14e6 <dtoa_prf+0x6a>
    14da:	60 e2       	ldi	r22, 0x20	; 32
    14dc:	05 c0       	rjmp	.+10     	; 0x14e8 <dtoa_prf+0x6c>
    14de:	6d e2       	ldi	r22, 0x2D	; 45
    14e0:	03 c0       	rjmp	.+6      	; 0x14e8 <dtoa_prf+0x6c>
    14e2:	6b e2       	ldi	r22, 0x2B	; 43
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <dtoa_prf+0x6c>
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	73 ff       	sbrs	r23, 3
    14ea:	3d c0       	rjmp	.+122    	; 0x1566 <dtoa_prf+0xea>
    14ec:	66 23       	and	r22, r22
    14ee:	11 f0       	breq	.+4      	; 0x14f4 <dtoa_prf+0x78>
    14f0:	84 e0       	ldi	r24, 0x04	; 4
    14f2:	01 c0       	rjmp	.+2      	; 0x14f6 <dtoa_prf+0x7a>
    14f4:	83 e0       	ldi	r24, 0x03	; 3
    14f6:	8b 15       	cp	r24, r11
    14f8:	10 f4       	brcc	.+4      	; 0x14fe <dtoa_prf+0x82>
    14fa:	b8 1a       	sub	r11, r24
    14fc:	01 c0       	rjmp	.+2      	; 0x1500 <dtoa_prf+0x84>
    14fe:	b1 2c       	mov	r11, r1
    1500:	e4 fc       	sbrc	r14, 4
    1502:	0b c0       	rjmp	.+22     	; 0x151a <dtoa_prf+0x9e>
    1504:	8b 2d       	mov	r24, r11
    1506:	f6 01       	movw	r30, r12
    1508:	90 e2       	ldi	r25, 0x20	; 32
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <dtoa_prf+0x94>
    150c:	91 93       	st	Z+, r25
    150e:	81 50       	subi	r24, 0x01	; 1
    1510:	81 11       	cpse	r24, r1
    1512:	fc cf       	rjmp	.-8      	; 0x150c <dtoa_prf+0x90>
    1514:	cb 0c       	add	r12, r11
    1516:	d1 1c       	adc	r13, r1
    1518:	b1 2c       	mov	r11, r1
    151a:	66 23       	and	r22, r22
    151c:	19 f0       	breq	.+6      	; 0x1524 <dtoa_prf+0xa8>
    151e:	d6 01       	movw	r26, r12
    1520:	6d 93       	st	X+, r22
    1522:	6d 01       	movw	r12, r26
    1524:	e2 fe       	sbrs	r14, 2
    1526:	0a c0       	rjmp	.+20     	; 0x153c <dtoa_prf+0xc0>
    1528:	8e e4       	ldi	r24, 0x4E	; 78
    152a:	f6 01       	movw	r30, r12
    152c:	80 83       	st	Z, r24
    152e:	91 e4       	ldi	r25, 0x41	; 65
    1530:	91 83       	std	Z+1, r25	; 0x01
    1532:	82 83       	std	Z+2, r24	; 0x02
    1534:	f3 e0       	ldi	r31, 0x03	; 3
    1536:	cf 0e       	add	r12, r31
    1538:	d1 1c       	adc	r13, r1
    153a:	0c c0       	rjmp	.+24     	; 0x1554 <dtoa_prf+0xd8>
    153c:	8e e6       	ldi	r24, 0x6E	; 110
    153e:	d6 01       	movw	r26, r12
    1540:	8c 93       	st	X, r24
    1542:	91 e6       	ldi	r25, 0x61	; 97
    1544:	11 96       	adiw	r26, 0x01	; 1
    1546:	9c 93       	st	X, r25
    1548:	11 97       	sbiw	r26, 0x01	; 1
    154a:	12 96       	adiw	r26, 0x02	; 2
    154c:	8c 93       	st	X, r24
    154e:	b3 e0       	ldi	r27, 0x03	; 3
    1550:	cb 0e       	add	r12, r27
    1552:	d1 1c       	adc	r13, r1
    1554:	8b 2d       	mov	r24, r11
    1556:	f6 01       	movw	r30, r12
    1558:	90 e2       	ldi	r25, 0x20	; 32
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <dtoa_prf+0xe4>
    155c:	91 93       	st	Z+, r25
    155e:	81 50       	subi	r24, 0x01	; 1
    1560:	81 11       	cpse	r24, r1
    1562:	fc cf       	rjmp	.-8      	; 0x155c <dtoa_prf+0xe0>
    1564:	40 c0       	rjmp	.+128    	; 0x15e6 <dtoa_prf+0x16a>
    1566:	72 ff       	sbrs	r23, 2
    1568:	45 c0       	rjmp	.+138    	; 0x15f4 <dtoa_prf+0x178>
    156a:	66 23       	and	r22, r22
    156c:	11 f0       	breq	.+4      	; 0x1572 <dtoa_prf+0xf6>
    156e:	84 e0       	ldi	r24, 0x04	; 4
    1570:	01 c0       	rjmp	.+2      	; 0x1574 <dtoa_prf+0xf8>
    1572:	83 e0       	ldi	r24, 0x03	; 3
    1574:	8b 15       	cp	r24, r11
    1576:	10 f4       	brcc	.+4      	; 0x157c <dtoa_prf+0x100>
    1578:	b8 1a       	sub	r11, r24
    157a:	01 c0       	rjmp	.+2      	; 0x157e <dtoa_prf+0x102>
    157c:	b1 2c       	mov	r11, r1
    157e:	e4 fc       	sbrc	r14, 4
    1580:	0b c0       	rjmp	.+22     	; 0x1598 <dtoa_prf+0x11c>
    1582:	8b 2d       	mov	r24, r11
    1584:	f6 01       	movw	r30, r12
    1586:	90 e2       	ldi	r25, 0x20	; 32
    1588:	02 c0       	rjmp	.+4      	; 0x158e <dtoa_prf+0x112>
    158a:	91 93       	st	Z+, r25
    158c:	81 50       	subi	r24, 0x01	; 1
    158e:	81 11       	cpse	r24, r1
    1590:	fc cf       	rjmp	.-8      	; 0x158a <dtoa_prf+0x10e>
    1592:	cb 0c       	add	r12, r11
    1594:	d1 1c       	adc	r13, r1
    1596:	b1 2c       	mov	r11, r1
    1598:	66 23       	and	r22, r22
    159a:	19 f0       	breq	.+6      	; 0x15a2 <dtoa_prf+0x126>
    159c:	f6 01       	movw	r30, r12
    159e:	61 93       	st	Z+, r22
    15a0:	6f 01       	movw	r12, r30
    15a2:	e2 fe       	sbrs	r14, 2
    15a4:	0e c0       	rjmp	.+28     	; 0x15c2 <dtoa_prf+0x146>
    15a6:	89 e4       	ldi	r24, 0x49	; 73
    15a8:	d6 01       	movw	r26, r12
    15aa:	8c 93       	st	X, r24
    15ac:	8e e4       	ldi	r24, 0x4E	; 78
    15ae:	11 96       	adiw	r26, 0x01	; 1
    15b0:	8c 93       	st	X, r24
    15b2:	11 97       	sbiw	r26, 0x01	; 1
    15b4:	86 e4       	ldi	r24, 0x46	; 70
    15b6:	12 96       	adiw	r26, 0x02	; 2
    15b8:	8c 93       	st	X, r24
    15ba:	b3 e0       	ldi	r27, 0x03	; 3
    15bc:	cb 0e       	add	r12, r27
    15be:	d1 1c       	adc	r13, r1
    15c0:	0a c0       	rjmp	.+20     	; 0x15d6 <dtoa_prf+0x15a>
    15c2:	89 e6       	ldi	r24, 0x69	; 105
    15c4:	f6 01       	movw	r30, r12
    15c6:	80 83       	st	Z, r24
    15c8:	8e e6       	ldi	r24, 0x6E	; 110
    15ca:	81 83       	std	Z+1, r24	; 0x01
    15cc:	86 e6       	ldi	r24, 0x66	; 102
    15ce:	82 83       	std	Z+2, r24	; 0x02
    15d0:	f3 e0       	ldi	r31, 0x03	; 3
    15d2:	cf 0e       	add	r12, r31
    15d4:	d1 1c       	adc	r13, r1
    15d6:	8b 2d       	mov	r24, r11
    15d8:	f6 01       	movw	r30, r12
    15da:	90 e2       	ldi	r25, 0x20	; 32
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <dtoa_prf+0x166>
    15de:	91 93       	st	Z+, r25
    15e0:	81 50       	subi	r24, 0x01	; 1
    15e2:	81 11       	cpse	r24, r1
    15e4:	fc cf       	rjmp	.-8      	; 0x15de <dtoa_prf+0x162>
    15e6:	f6 01       	movw	r30, r12
    15e8:	eb 0d       	add	r30, r11
    15ea:	f1 1d       	adc	r31, r1
    15ec:	10 82       	st	Z, r1
    15ee:	2e ef       	ldi	r18, 0xFE	; 254
    15f0:	3f ef       	ldi	r19, 0xFF	; 255
    15f2:	ac c0       	rjmp	.+344    	; 0x174c <dtoa_prf+0x2d0>
    15f4:	a1 e0       	ldi	r26, 0x01	; 1
    15f6:	61 11       	cpse	r22, r1
    15f8:	01 c0       	rjmp	.+2      	; 0x15fc <dtoa_prf+0x180>
    15fa:	a0 e0       	ldi	r26, 0x00	; 0
    15fc:	4a 2f       	mov	r20, r26
    15fe:	50 e0       	ldi	r21, 0x00	; 0
    1600:	18 16       	cp	r1, r24
    1602:	19 06       	cpc	r1, r25
    1604:	24 f4       	brge	.+8      	; 0x160e <dtoa_prf+0x192>
    1606:	9c 01       	movw	r18, r24
    1608:	2f 5f       	subi	r18, 0xFF	; 255
    160a:	3f 4f       	sbci	r19, 0xFF	; 255
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <dtoa_prf+0x196>
    160e:	21 e0       	ldi	r18, 0x01	; 1
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	24 0f       	add	r18, r20
    1614:	35 1f       	adc	r19, r21
    1616:	11 23       	and	r17, r17
    1618:	29 f0       	breq	.+10     	; 0x1624 <dtoa_prf+0x1a8>
    161a:	41 2f       	mov	r20, r17
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	4f 5f       	subi	r20, 0xFF	; 255
    1620:	5f 4f       	sbci	r21, 0xFF	; 255
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <dtoa_prf+0x1ac>
    1624:	40 e0       	ldi	r20, 0x00	; 0
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	42 0f       	add	r20, r18
    162a:	53 1f       	adc	r21, r19
    162c:	2b 2d       	mov	r18, r11
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	42 17       	cp	r20, r18
    1632:	53 07       	cpc	r21, r19
    1634:	14 f4       	brge	.+4      	; 0x163a <dtoa_prf+0x1be>
    1636:	b4 1a       	sub	r11, r20
    1638:	01 c0       	rjmp	.+2      	; 0x163c <dtoa_prf+0x1c0>
    163a:	b1 2c       	mov	r11, r1
    163c:	3e 2d       	mov	r19, r14
    163e:	30 71       	andi	r19, 0x10	; 16
    1640:	e4 fc       	sbrc	r14, 4
    1642:	0d c0       	rjmp	.+26     	; 0x165e <dtoa_prf+0x1e2>
    1644:	e3 fc       	sbrc	r14, 3
    1646:	0b c0       	rjmp	.+22     	; 0x165e <dtoa_prf+0x1e2>
    1648:	2b 2d       	mov	r18, r11
    164a:	f6 01       	movw	r30, r12
    164c:	40 e2       	ldi	r20, 0x20	; 32
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <dtoa_prf+0x1d8>
    1650:	41 93       	st	Z+, r20
    1652:	21 50       	subi	r18, 0x01	; 1
    1654:	21 11       	cpse	r18, r1
    1656:	fc cf       	rjmp	.-8      	; 0x1650 <dtoa_prf+0x1d4>
    1658:	cb 0c       	add	r12, r11
    165a:	d1 1c       	adc	r13, r1
    165c:	b1 2c       	mov	r11, r1
    165e:	aa 23       	and	r26, r26
    1660:	19 f0       	breq	.+6      	; 0x1668 <dtoa_prf+0x1ec>
    1662:	d6 01       	movw	r26, r12
    1664:	6d 93       	st	X+, r22
    1666:	6d 01       	movw	r12, r26
    1668:	31 11       	cpse	r19, r1
    166a:	0b c0       	rjmp	.+22     	; 0x1682 <dtoa_prf+0x206>
    166c:	2b 2d       	mov	r18, r11
    166e:	f6 01       	movw	r30, r12
    1670:	30 e3       	ldi	r19, 0x30	; 48
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <dtoa_prf+0x1fc>
    1674:	31 93       	st	Z+, r19
    1676:	21 50       	subi	r18, 0x01	; 1
    1678:	21 11       	cpse	r18, r1
    167a:	fc cf       	rjmp	.-8      	; 0x1674 <dtoa_prf+0x1f8>
    167c:	cb 0c       	add	r12, r11
    167e:	d1 1c       	adc	r13, r1
    1680:	b1 2c       	mov	r11, r1
    1682:	f8 0e       	add	r15, r24
    1684:	0a 81       	ldd	r16, Y+2	; 0x02
    1686:	40 e1       	ldi	r20, 0x10	; 16
    1688:	a4 2e       	mov	r10, r20
    168a:	a7 22       	and	r10, r23
    168c:	74 ff       	sbrs	r23, 4
    168e:	03 c0       	rjmp	.+6      	; 0x1696 <dtoa_prf+0x21a>
    1690:	01 33       	cpi	r16, 0x31	; 49
    1692:	09 f4       	brne	.+2      	; 0x1696 <dtoa_prf+0x21a>
    1694:	fa 94       	dec	r15
    1696:	1f 14       	cp	r1, r15
    1698:	2c f4       	brge	.+10     	; 0x16a4 <dtoa_prf+0x228>
    169a:	2f 2d       	mov	r18, r15
    169c:	29 30       	cpi	r18, 0x09	; 9
    169e:	18 f0       	brcs	.+6      	; 0x16a6 <dtoa_prf+0x22a>
    16a0:	28 e0       	ldi	r18, 0x08	; 8
    16a2:	01 c0       	rjmp	.+2      	; 0x16a6 <dtoa_prf+0x22a>
    16a4:	21 e0       	ldi	r18, 0x01	; 1
    16a6:	ac 01       	movw	r20, r24
    16a8:	97 ff       	sbrs	r25, 7
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <dtoa_prf+0x234>
    16ac:	40 e0       	ldi	r20, 0x00	; 0
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	3e e2       	ldi	r19, 0x2E	; 46
    16b6:	93 2e       	mov	r9, r19
    16b8:	fc 01       	movw	r30, r24
    16ba:	e2 1b       	sub	r30, r18
    16bc:	f1 09       	sbc	r31, r1
    16be:	9f 01       	movw	r18, r30
    16c0:	dc 01       	movw	r26, r24
    16c2:	a4 1b       	sub	r26, r20
    16c4:	b5 0b       	sbc	r27, r21
    16c6:	fe 01       	movw	r30, r28
    16c8:	31 96       	adiw	r30, 0x01	; 1
    16ca:	ea 0f       	add	r30, r26
    16cc:	fb 1f       	adc	r31, r27
    16ce:	a1 2f       	mov	r26, r17
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	66 24       	eor	r6, r6
    16d4:	77 24       	eor	r7, r7
    16d6:	6a 1a       	sub	r6, r26
    16d8:	7b 0a       	sbc	r7, r27
    16da:	4f 3f       	cpi	r20, 0xFF	; 255
    16dc:	1f ef       	ldi	r17, 0xFF	; 255
    16de:	51 07       	cpc	r21, r17
    16e0:	19 f4       	brne	.+6      	; 0x16e8 <dtoa_prf+0x26c>
    16e2:	d6 01       	movw	r26, r12
    16e4:	9d 92       	st	X+, r9
    16e6:	6d 01       	movw	r12, r26
    16e8:	84 17       	cp	r24, r20
    16ea:	95 07       	cpc	r25, r21
    16ec:	54 f0       	brlt	.+20     	; 0x1702 <dtoa_prf+0x286>
    16ee:	24 17       	cp	r18, r20
    16f0:	35 07       	cpc	r19, r21
    16f2:	3c f4       	brge	.+14     	; 0x1702 <dtoa_prf+0x286>
    16f4:	7f 01       	movw	r14, r30
    16f6:	e6 0e       	add	r14, r22
    16f8:	f7 1e       	adc	r15, r23
    16fa:	d7 01       	movw	r26, r14
    16fc:	11 96       	adiw	r26, 0x01	; 1
    16fe:	1c 91       	ld	r17, X
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <dtoa_prf+0x288>
    1702:	10 e3       	ldi	r17, 0x30	; 48
    1704:	41 50       	subi	r20, 0x01	; 1
    1706:	51 09       	sbc	r21, r1
    1708:	6f 5f       	subi	r22, 0xFF	; 255
    170a:	7f 4f       	sbci	r23, 0xFF	; 255
    170c:	46 15       	cp	r20, r6
    170e:	57 05       	cpc	r21, r7
    1710:	24 f0       	brlt	.+8      	; 0x171a <dtoa_prf+0x29e>
    1712:	d6 01       	movw	r26, r12
    1714:	1d 93       	st	X+, r17
    1716:	6d 01       	movw	r12, r26
    1718:	e0 cf       	rjmp	.-64     	; 0x16da <dtoa_prf+0x25e>
    171a:	48 17       	cp	r20, r24
    171c:	59 07       	cpc	r21, r25
    171e:	39 f4       	brne	.+14     	; 0x172e <dtoa_prf+0x2b2>
    1720:	06 33       	cpi	r16, 0x36	; 54
    1722:	20 f4       	brcc	.+8      	; 0x172c <dtoa_prf+0x2b0>
    1724:	05 33       	cpi	r16, 0x35	; 53
    1726:	19 f4       	brne	.+6      	; 0x172e <dtoa_prf+0x2b2>
    1728:	a1 10       	cpse	r10, r1
    172a:	01 c0       	rjmp	.+2      	; 0x172e <dtoa_prf+0x2b2>
    172c:	11 e3       	ldi	r17, 0x31	; 49
    172e:	f6 01       	movw	r30, r12
    1730:	11 93       	st	Z+, r17
    1732:	8b 2d       	mov	r24, r11
    1734:	df 01       	movw	r26, r30
    1736:	90 e2       	ldi	r25, 0x20	; 32
    1738:	02 c0       	rjmp	.+4      	; 0x173e <dtoa_prf+0x2c2>
    173a:	9d 93       	st	X+, r25
    173c:	81 50       	subi	r24, 0x01	; 1
    173e:	81 11       	cpse	r24, r1
    1740:	fc cf       	rjmp	.-8      	; 0x173a <dtoa_prf+0x2be>
    1742:	eb 0d       	add	r30, r11
    1744:	f1 1d       	adc	r31, r1
    1746:	10 82       	st	Z, r1
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	c9 01       	movw	r24, r18
    174e:	29 96       	adiw	r28, 0x09	; 9
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	0f 91       	pop	r16
    1762:	ff 90       	pop	r15
    1764:	ef 90       	pop	r14
    1766:	df 90       	pop	r13
    1768:	cf 90       	pop	r12
    176a:	bf 90       	pop	r11
    176c:	af 90       	pop	r10
    176e:	9f 90       	pop	r9
    1770:	7f 90       	pop	r7
    1772:	6f 90       	pop	r6
    1774:	08 95       	ret

00001776 <__ftoa_engine>:
    1776:	28 30       	cpi	r18, 0x08	; 8
    1778:	08 f0       	brcs	.+2      	; 0x177c <__ftoa_engine+0x6>
    177a:	27 e0       	ldi	r18, 0x07	; 7
    177c:	33 27       	eor	r19, r19
    177e:	da 01       	movw	r26, r20
    1780:	99 0f       	add	r25, r25
    1782:	31 1d       	adc	r19, r1
    1784:	87 fd       	sbrc	r24, 7
    1786:	91 60       	ori	r25, 0x01	; 1
    1788:	00 96       	adiw	r24, 0x00	; 0
    178a:	61 05       	cpc	r22, r1
    178c:	71 05       	cpc	r23, r1
    178e:	39 f4       	brne	.+14     	; 0x179e <__ftoa_engine+0x28>
    1790:	32 60       	ori	r19, 0x02	; 2
    1792:	2e 5f       	subi	r18, 0xFE	; 254
    1794:	3d 93       	st	X+, r19
    1796:	30 e3       	ldi	r19, 0x30	; 48
    1798:	2a 95       	dec	r18
    179a:	e1 f7       	brne	.-8      	; 0x1794 <__ftoa_engine+0x1e>
    179c:	08 95       	ret
    179e:	9f 3f       	cpi	r25, 0xFF	; 255
    17a0:	30 f0       	brcs	.+12     	; 0x17ae <__ftoa_engine+0x38>
    17a2:	80 38       	cpi	r24, 0x80	; 128
    17a4:	71 05       	cpc	r23, r1
    17a6:	61 05       	cpc	r22, r1
    17a8:	09 f0       	breq	.+2      	; 0x17ac <__ftoa_engine+0x36>
    17aa:	3c 5f       	subi	r19, 0xFC	; 252
    17ac:	3c 5f       	subi	r19, 0xFC	; 252
    17ae:	3d 93       	st	X+, r19
    17b0:	91 30       	cpi	r25, 0x01	; 1
    17b2:	08 f0       	brcs	.+2      	; 0x17b6 <__ftoa_engine+0x40>
    17b4:	80 68       	ori	r24, 0x80	; 128
    17b6:	91 1d       	adc	r25, r1
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	1f 93       	push	r17
    17be:	0f 93       	push	r16
    17c0:	ff 92       	push	r15
    17c2:	ef 92       	push	r14
    17c4:	19 2f       	mov	r17, r25
    17c6:	98 7f       	andi	r25, 0xF8	; 248
    17c8:	96 95       	lsr	r25
    17ca:	e9 2f       	mov	r30, r25
    17cc:	96 95       	lsr	r25
    17ce:	96 95       	lsr	r25
    17d0:	e9 0f       	add	r30, r25
    17d2:	ff 27       	eor	r31, r31
    17d4:	e2 55       	subi	r30, 0x52	; 82
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	99 27       	eor	r25, r25
    17da:	33 27       	eor	r19, r19
    17dc:	ee 24       	eor	r14, r14
    17de:	ff 24       	eor	r15, r15
    17e0:	a7 01       	movw	r20, r14
    17e2:	e7 01       	movw	r28, r14
    17e4:	05 90       	lpm	r0, Z+
    17e6:	08 94       	sec
    17e8:	07 94       	ror	r0
    17ea:	28 f4       	brcc	.+10     	; 0x17f6 <__ftoa_engine+0x80>
    17ec:	36 0f       	add	r19, r22
    17ee:	e7 1e       	adc	r14, r23
    17f0:	f8 1e       	adc	r15, r24
    17f2:	49 1f       	adc	r20, r25
    17f4:	51 1d       	adc	r21, r1
    17f6:	66 0f       	add	r22, r22
    17f8:	77 1f       	adc	r23, r23
    17fa:	88 1f       	adc	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	06 94       	lsr	r0
    1800:	a1 f7       	brne	.-24     	; 0x17ea <__ftoa_engine+0x74>
    1802:	05 90       	lpm	r0, Z+
    1804:	07 94       	ror	r0
    1806:	28 f4       	brcc	.+10     	; 0x1812 <__ftoa_engine+0x9c>
    1808:	e7 0e       	add	r14, r23
    180a:	f8 1e       	adc	r15, r24
    180c:	49 1f       	adc	r20, r25
    180e:	56 1f       	adc	r21, r22
    1810:	c1 1d       	adc	r28, r1
    1812:	77 0f       	add	r23, r23
    1814:	88 1f       	adc	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	66 1f       	adc	r22, r22
    181a:	06 94       	lsr	r0
    181c:	a1 f7       	brne	.-24     	; 0x1806 <__ftoa_engine+0x90>
    181e:	05 90       	lpm	r0, Z+
    1820:	07 94       	ror	r0
    1822:	28 f4       	brcc	.+10     	; 0x182e <__ftoa_engine+0xb8>
    1824:	f8 0e       	add	r15, r24
    1826:	49 1f       	adc	r20, r25
    1828:	56 1f       	adc	r21, r22
    182a:	c7 1f       	adc	r28, r23
    182c:	d1 1d       	adc	r29, r1
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	66 1f       	adc	r22, r22
    1834:	77 1f       	adc	r23, r23
    1836:	06 94       	lsr	r0
    1838:	a1 f7       	brne	.-24     	; 0x1822 <__ftoa_engine+0xac>
    183a:	05 90       	lpm	r0, Z+
    183c:	07 94       	ror	r0
    183e:	20 f4       	brcc	.+8      	; 0x1848 <__ftoa_engine+0xd2>
    1840:	49 0f       	add	r20, r25
    1842:	56 1f       	adc	r21, r22
    1844:	c7 1f       	adc	r28, r23
    1846:	d8 1f       	adc	r29, r24
    1848:	99 0f       	add	r25, r25
    184a:	66 1f       	adc	r22, r22
    184c:	77 1f       	adc	r23, r23
    184e:	88 1f       	adc	r24, r24
    1850:	06 94       	lsr	r0
    1852:	a9 f7       	brne	.-22     	; 0x183e <__ftoa_engine+0xc8>
    1854:	84 91       	lpm	r24, Z
    1856:	10 95       	com	r17
    1858:	17 70       	andi	r17, 0x07	; 7
    185a:	41 f0       	breq	.+16     	; 0x186c <__ftoa_engine+0xf6>
    185c:	d6 95       	lsr	r29
    185e:	c7 95       	ror	r28
    1860:	57 95       	ror	r21
    1862:	47 95       	ror	r20
    1864:	f7 94       	ror	r15
    1866:	e7 94       	ror	r14
    1868:	1a 95       	dec	r17
    186a:	c1 f7       	brne	.-16     	; 0x185c <__ftoa_engine+0xe6>
    186c:	e4 e5       	ldi	r30, 0x54	; 84
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	68 94       	set
    1872:	15 90       	lpm	r1, Z+
    1874:	15 91       	lpm	r17, Z+
    1876:	35 91       	lpm	r19, Z+
    1878:	65 91       	lpm	r22, Z+
    187a:	95 91       	lpm	r25, Z+
    187c:	05 90       	lpm	r0, Z+
    187e:	7f e2       	ldi	r23, 0x2F	; 47
    1880:	73 95       	inc	r23
    1882:	e1 18       	sub	r14, r1
    1884:	f1 0a       	sbc	r15, r17
    1886:	43 0b       	sbc	r20, r19
    1888:	56 0b       	sbc	r21, r22
    188a:	c9 0b       	sbc	r28, r25
    188c:	d0 09       	sbc	r29, r0
    188e:	c0 f7       	brcc	.-16     	; 0x1880 <__ftoa_engine+0x10a>
    1890:	e1 0c       	add	r14, r1
    1892:	f1 1e       	adc	r15, r17
    1894:	43 1f       	adc	r20, r19
    1896:	56 1f       	adc	r21, r22
    1898:	c9 1f       	adc	r28, r25
    189a:	d0 1d       	adc	r29, r0
    189c:	7e f4       	brtc	.+30     	; 0x18bc <__ftoa_engine+0x146>
    189e:	70 33       	cpi	r23, 0x30	; 48
    18a0:	11 f4       	brne	.+4      	; 0x18a6 <__ftoa_engine+0x130>
    18a2:	8a 95       	dec	r24
    18a4:	e6 cf       	rjmp	.-52     	; 0x1872 <__ftoa_engine+0xfc>
    18a6:	e8 94       	clt
    18a8:	01 50       	subi	r16, 0x01	; 1
    18aa:	30 f0       	brcs	.+12     	; 0x18b8 <__ftoa_engine+0x142>
    18ac:	08 0f       	add	r16, r24
    18ae:	0a f4       	brpl	.+2      	; 0x18b2 <__ftoa_engine+0x13c>
    18b0:	00 27       	eor	r16, r16
    18b2:	02 17       	cp	r16, r18
    18b4:	08 f4       	brcc	.+2      	; 0x18b8 <__ftoa_engine+0x142>
    18b6:	20 2f       	mov	r18, r16
    18b8:	23 95       	inc	r18
    18ba:	02 2f       	mov	r16, r18
    18bc:	7a 33       	cpi	r23, 0x3A	; 58
    18be:	28 f0       	brcs	.+10     	; 0x18ca <__ftoa_engine+0x154>
    18c0:	79 e3       	ldi	r23, 0x39	; 57
    18c2:	7d 93       	st	X+, r23
    18c4:	2a 95       	dec	r18
    18c6:	e9 f7       	brne	.-6      	; 0x18c2 <__ftoa_engine+0x14c>
    18c8:	10 c0       	rjmp	.+32     	; 0x18ea <__ftoa_engine+0x174>
    18ca:	7d 93       	st	X+, r23
    18cc:	2a 95       	dec	r18
    18ce:	89 f6       	brne	.-94     	; 0x1872 <__ftoa_engine+0xfc>
    18d0:	06 94       	lsr	r0
    18d2:	97 95       	ror	r25
    18d4:	67 95       	ror	r22
    18d6:	37 95       	ror	r19
    18d8:	17 95       	ror	r17
    18da:	17 94       	ror	r1
    18dc:	e1 18       	sub	r14, r1
    18de:	f1 0a       	sbc	r15, r17
    18e0:	43 0b       	sbc	r20, r19
    18e2:	56 0b       	sbc	r21, r22
    18e4:	c9 0b       	sbc	r28, r25
    18e6:	d0 09       	sbc	r29, r0
    18e8:	98 f0       	brcs	.+38     	; 0x1910 <__ftoa_engine+0x19a>
    18ea:	23 95       	inc	r18
    18ec:	7e 91       	ld	r23, -X
    18ee:	73 95       	inc	r23
    18f0:	7a 33       	cpi	r23, 0x3A	; 58
    18f2:	08 f0       	brcs	.+2      	; 0x18f6 <__ftoa_engine+0x180>
    18f4:	70 e3       	ldi	r23, 0x30	; 48
    18f6:	7c 93       	st	X, r23
    18f8:	20 13       	cpse	r18, r16
    18fa:	b8 f7       	brcc	.-18     	; 0x18ea <__ftoa_engine+0x174>
    18fc:	7e 91       	ld	r23, -X
    18fe:	70 61       	ori	r23, 0x10	; 16
    1900:	7d 93       	st	X+, r23
    1902:	30 f0       	brcs	.+12     	; 0x1910 <__ftoa_engine+0x19a>
    1904:	83 95       	inc	r24
    1906:	71 e3       	ldi	r23, 0x31	; 49
    1908:	7d 93       	st	X+, r23
    190a:	70 e3       	ldi	r23, 0x30	; 48
    190c:	2a 95       	dec	r18
    190e:	e1 f7       	brne	.-8      	; 0x1908 <__ftoa_engine+0x192>
    1910:	11 24       	eor	r1, r1
    1912:	ef 90       	pop	r14
    1914:	ff 90       	pop	r15
    1916:	0f 91       	pop	r16
    1918:	1f 91       	pop	r17
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	99 27       	eor	r25, r25
    1920:	87 fd       	sbrc	r24, 7
    1922:	90 95       	com	r25
    1924:	08 95       	ret

00001926 <strrev>:
    1926:	dc 01       	movw	r26, r24
    1928:	fc 01       	movw	r30, r24
    192a:	67 2f       	mov	r22, r23
    192c:	71 91       	ld	r23, Z+
    192e:	77 23       	and	r23, r23
    1930:	e1 f7       	brne	.-8      	; 0x192a <strrev+0x4>
    1932:	32 97       	sbiw	r30, 0x02	; 2
    1934:	04 c0       	rjmp	.+8      	; 0x193e <strrev+0x18>
    1936:	7c 91       	ld	r23, X
    1938:	6d 93       	st	X+, r22
    193a:	70 83       	st	Z, r23
    193c:	62 91       	ld	r22, -Z
    193e:	ae 17       	cp	r26, r30
    1940:	bf 07       	cpc	r27, r31
    1942:	c8 f3       	brcs	.-14     	; 0x1936 <strrev+0x10>
    1944:	08 95       	ret

00001946 <__eerd_block_m16>:
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22

0000194a <__eerd_blraw_m16>:
    194a:	fc 01       	movw	r30, r24
    194c:	e1 99       	sbic	0x1c, 1	; 28
    194e:	fe cf       	rjmp	.-4      	; 0x194c <__eerd_blraw_m16+0x2>
    1950:	06 c0       	rjmp	.+12     	; 0x195e <__eerd_blraw_m16+0x14>
    1952:	ff bb       	out	0x1f, r31	; 31
    1954:	ee bb       	out	0x1e, r30	; 30
    1956:	e0 9a       	sbi	0x1c, 0	; 28
    1958:	31 96       	adiw	r30, 0x01	; 1
    195a:	0d b2       	in	r0, 0x1d	; 29
    195c:	0d 92       	st	X+, r0
    195e:	41 50       	subi	r20, 0x01	; 1
    1960:	50 40       	sbci	r21, 0x00	; 0
    1962:	b8 f7       	brcc	.-18     	; 0x1952 <__eerd_blraw_m16+0x8>
    1964:	08 95       	ret

00001966 <__eeupd_byte_m16>:
    1966:	26 2f       	mov	r18, r22

00001968 <__eeupd_r18_m16>:
    1968:	e1 99       	sbic	0x1c, 1	; 28
    196a:	fe cf       	rjmp	.-4      	; 0x1968 <__eeupd_r18_m16>
    196c:	9f bb       	out	0x1f, r25	; 31
    196e:	8e bb       	out	0x1e, r24	; 30
    1970:	e0 9a       	sbi	0x1c, 0	; 28
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	0d b2       	in	r0, 0x1d	; 29
    1976:	02 16       	cp	r0, r18
    1978:	31 f0       	breq	.+12     	; 0x1986 <__eeupd_r18_m16+0x1e>
    197a:	2d bb       	out	0x1d, r18	; 29
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	e2 9a       	sbi	0x1c, 2	; 28
    1982:	e1 9a       	sbi	0x1c, 1	; 28
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	08 95       	ret

00001988 <_exit>:
    1988:	f8 94       	cli

0000198a <__stop_program>:
    198a:	ff cf       	rjmp	.-2      	; 0x198a <__stop_program>
